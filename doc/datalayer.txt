References

	GeoShare Architectural Description, March, 1991.

	GeoShare Software Design, March, 1991.

	GeoScience.h 'C' include file.

Introduction

	The GeoShare facility is a method by which participating geoscientific applications may share data with each other in a Client / Server integration model.  Vendors may participate in the GeoShare system by making two processes available to their customers.  The first is the data receiver known within GeoShare as the Service process.  The second is the data provider known as the Client process.   The data provider, Client process, may be provided as a separate application or integrated directly within the vendor's application.  The data receiver, Service process, is provided as a separate process that may be started by a GeoShare Connection Manager as defined in the GeoShare Software Design document.

Scope

	This document describes the Data Layer of the GeoShare facility as described in the GeoShare Architectural Description document.  The Data Layer is between the User Interface Layer, which manages all of the Client's interaction with the user and the Communications Layer which provides all of the interprocess communication facilities for the Data Layer.

	This document is intended for the developer of a GeoShare application, either a data receiver Service or a data provider Client.

Overview

	The Data Layer's responsibility is to take the data specifications given by the user, read a proprietary database and load interface structures which are sent to the Communications Layer. It is also responsible for breaking up the hierarchical structure trees into individual structures that are acceptable to the Communications Layer.  The structure tree is regenerated in the receiving Service in its own Data Layer using tokens embedded in the structures by the sending Client's Data Layer.

	The structures are built from two descriptions which are read at run time.  The physical description of a structure and the data description of the structure.

	The physical description of a structure includes the data type and byte length of each element of the structure along with the location of each element within the structure for a given version of the structure.  The physical description is contained in the Structure Definition Table, or SDT.

	The data description of the structure indicates the location of each element of the structure within the proprietary database of the vendor suppling the sender or receiver process.  The data description is contained in the Data Location Table, or DLT.

	The SDT and DLT may exist as relations in the local database of each process or as flat files readable by the sender and receiver processes.

Structure Definition Table

	This section describes how a typical structure is encoded in the SDT.

	First, each element in the structure is given an ID number.  The ID number is unique for the element and the version of the structure.  That is, whenever an element is modified in type, size, or location it will get a new element ID and the structure itself will get the next version number.

		Next, the SDT is filled out as shown in this diagram.

	The element id field matches the element ids assigned to each element of the structure as shown in the previous diagram.

	The version number field is the version number for the entire structure.  If any element of the structure is modified in any way the entire structure will be given a new version number and each element will be given a new entry with the new version number.  The modified element or elements will be given new element ids.  The original entries will remain intact.  No entries will ever be deleted from this table.

	Member number indicates the position of the element within the structure.  A member number of zero indicates a structure that is not directly part of a hierarchy, it may be referenced by a pointer within another structure however.  See the description of the pointer reference field.

	Parent id indicates the hierarchy of elements.  The parent id of any atomic element is the id of the structure of which it is a part.  The parent id of a top level structure is zero.

	Type indicates the data type of the element.  The types actually appearing in the table may not necessarily relate to data types defined in the 'C' language; they are types unique to the GeoShare system.

	Element size indicates the number of bytes defined as the size of the element.  This is not necessarily the size actually allocated in memory due to the differences in various machine architectures.  This field is only used for atomic types such as int and double, composite types will have zero in this field.

	Pointer reference indicates the id number of the structure pointed to by a pointer type element.  This field is only used for elements which point to other structure types.

	Name is the character string used as the variable name of the element in the structure definition.

Data Location Table

	The DLT is provided by each vendor of a GeoShare application, either a data sender or a receiver.  This table describes the location within the application's database of each data element in the GeoShare interface structures.  This section describes how the sample structure would be encoded in the DLT.







	The element id field matches the element ids assigned to each element of the structure as described earlier.

	The version number field is the version number for the entire structure as described in the previous section.

	The relation name field indicates the name of a database table in which the data item will either be retrieved from or stored into.  For applications not using a relational database this field may contain any information needed by the application to store the data item.

	The column name field indicated the name of a column in the database table in which the data item will either be retrieved from or stored into.  For applications not using a relational database this field may contain any information needed by the application to store the data item.

	The key element list field indicates which element id or element ids constitute the unique key used to identify row in the database table in which this element can be found.  For applications not using a relational database this field may be unused or contain anything required by the application to identify the data item location.

Data Passing Methods and Protocol

	Sender and Receiver programs in the GeoShare system will be written using the 'C' structures defined in the GeoScience.h header file.  

	This approach provides a simple and familiar interface for programmers writing these programs.  By utilizing the structures directly in applications, programmers are able to dictate flexibly the mapping of their data onto the geoscience model.

Data Structure Dependency

	Since programs will reference the structures directly, they will be inherently dependant on particular versions of the structure definitions they use.

	The GeoShare interface structures must be maintained in a fashion such that programs written for the system do not become obsolete or cease to function when additions are made to the structure definitions they use.

	This problem is primarily handled in the same fashion that system structure definition dependency is handled.  Consider the system header file stdio.h.  Additions to the standard FILE data structure are extremely rare, but when they are required they are added to the bottom of the structure such that older programs can still be compatible by referencing just a subset of the structure.  Changes made to widely published data structures like the FILE structure are made only in a carefully arbitrated fashion mediated by a central standards committee that is responsible for re-publishing the definition to users.

	There are several fairly obvious policies to observe that will greatly simplify the task of maintaining compatibility between various data structure definition versions:

		1)	New structure members must be added only to the bottom of structure definitions.

		2)	Existing members must never be deleted or have their data type changed.  If a member type becomes obsolete, a new version of it must be added to the bottom of the structure.

		3)	Definitions of structure members must remain statically positioned relative to the start of the structure.  Reorganization of, or insertion into existing  definitions is not allowed.

		4)	Structure type names must never be changed. 

	If the above rules are observed when modifying the geoscience header definitions, existing GeoShare programs can be utilized without having to be modified or re-linked.

	Programs written for different versions of the interface structures can be used together with the following considerations:

		*	Receiver programs  written with a given version of the interface structures may interact only with Senders using the same or newer structure versions.  A Receiver that is written against new structure definitions cannot interact with a Sender that uses older structure definitions unless the receiver does not reference the data objects unique to the new version of the structure.



		*	Sender programs should be written to inquire what version of the interface structures the Receiver they are connected to can handle.  Senders should be designed to handle sending data subsets when appropriate.  This means that any data types that are unique to the sending application's newer version of the interface structures must be omitted from the transfer.  This special processing might require user interface interaction.

		Example:

			Given the receivers: rv1 and rv2 and the senders: sv1 and sv2 the following transfers are compatible and do not require any special compatibility handling logic:

				sv1 -> rv1

 				sv1 -> rv2

				sv2 -> rv2 

			The following transfer is not legitimate unless special processing is performed by the sender/receiver to determine a compatible data subset:

				sv2 -> rv1

Structure Splitting and Sending Protocol

	The following is an outline of the structure passing protocol and the policies that support it.

	There are policies regarding how and when data is sent from the Sender to the Receiver.  These policies exist to enforce a protocol that is designed to facilitate large data transfers without requiring special resource capacities on either side of the connection.

	The protocol defines how interface data structures are split up before being transferred.  Structures are considered to be composed of two types of entities; atoms and pointers.

	An atom is any member that is stored directly in the structure itself  while a pointer is a member stored in the structure by reference such as a vector or a pointer to a substructure.

	Structures sent by one application to another are processed in the following manner:

		*	All pointer members in the structure are replaced by tags that are numerically sequential.  i.e. the first pointer member encountered would be assigned TAG1 the next would be assigned TAG2 and so on.

		*	The remaining structure containing only atoms and tags is transferred.

		*	Each pointer member tagged in the structure is processed and sent in the same sequence as tagged.  The processing of the pointer members is the same as the initial processing of the structure: Each pointer member is tagged and sent afterwards.

	Note that the processing of structures is represented as a pre-order tree traversal:

	First the root structure is processed to atoms and sent.  The next transfer after the root will be the first tagged pointer.  If the pointer being processed contains pointers, they are processed and sent directly after the root pointer and so on.  Finally, the next pointer tagged in the root structure is processed and sent and so on.

	The processing of structures is a recursive operation and results in a predictable ordering of data transfer such that receivers can always know what context received data is in.

Transfer Types

	Sending a data structure involves one or more transfers. There are several classes of transfer:

		*	StructRootClass

		*	StructTagClass

		*	VectorTagClass

	The StructRootClass marks the beginning of a new transfer and the sending of the root data structure (atoms only).

	The StructTagClass marks the transfer of a structure pointer tagged within the parent structure.

	The VectorTagClass marks the transfer of a vector tagged within the parent structure.



Transfer States

	A data transfer may be in any one of the following states:

		START_OF_ROOT

		END_OF_ROOT

		START_OF_STRUCT_TAG

		END_OF_STRUCT_TAG

		START_OF_VECTOR_TAG

		CONTINUE_VECTOR_TAG

		END_OF_VECTOR_TAG

Structure Splitting and Traversal Example

	The algorithm for splitting up the data before sending is as follows:

	For each data element to process and send:

		*	Scan data structure and tag any non-atomic members.

		*	Transfer data structure.

		*	Process tags sequentially in the order tagged.  For each data tag, scan and tag non-atoms and send data element followed by any tags contained within.

	Consider the following structure definitions:

		struct c {

			int ci3;

			Vector_t cv3;

		}



		struct a {

			int ai1;

			struct  b  {

				int bi2;

				Vector_t  bv1;

			}

			char ac1[16];

			struct c *asp1;

			Vector_t av2;

		}



	1)	struct a is processed.  All non-atomic members are tagged (bv1, asp1, av2).

	2)	struct a is transferred.

	3)	Vector bv1 is transferred.

	4)	Structure tag asp1 is processed.  All non-atomic members are tagged (cv3).

	5)	structure asp1 is transferred.

	6)	Vector cv3 is transferred.

	7)	Vector av2 is transferred.

Data structure Programmatic Interface

	The sending application would interact with the data structures in the following manner:

		*	Allocate a structure in shared memory using the gs_alloc routine as follows:

				ptr = (struct TheStruct *) gs_alloc(sizeof(struct TheStruct), &key);

		*	Fill the structure:

				ptr->Type = type

				ptr->

	Alternatively, it is possible to supply programmers with an interface to the structures that hides their definition.  This method involves supplying routines that allocate structures, load structures in a tokenized fashion, and read structures in a tokenized fashion.

	for instance:

		To create a structure the user would make a call like:

			ptr = (Executive_t *) AllocStruct( "Executive_t" )

		where the type of structure to create is passed as a string.

		To load members of the structure the user would:

			status = LoadStruct( ptr, (MemberId)105, data)

		To read from the structure the user would:

			status = ReadStruct(ptr, (MemberId)105, &data);

	The MemberId argument identifies the member of the structure to process.  This id is an integer code read from the Structure Description Table (SDT).

	The problems associated with this method of handling the programmatic interface to the structures are:

		*	It complicates the design of sender/receiver programs by not allowing the programs to marshal their data:

		*	Receivers cannot predict the order in which they must process data.  Therefor it is difficult to write database loading routines that use imbedded SQL calls since building the phrases must be done dynamically. 

		*	Sending routines must fetch data in the order requested by the structure interface routines.  This leads to very inefficient data handling since programs cannot optimize their fetching of data. (i.e. from different databases or or other various sources.)  

GeoShare Structure Hierarchy


