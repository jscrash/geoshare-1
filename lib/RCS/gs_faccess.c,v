head     1.9;
branch   ;
access   ;
symbols  ;
locks    julian:1.9; strict;
comment  @ * @;


1.9
date     91.05.14.15.08.54;  author julian;  state Exp;
branches ;
next     1.8;

1.8
date     91.05.12.01.43.05;  author julian;  state Exp;
branches ;
next     1.7;

1.7
date     91.05.03.21.39.53;  author julian;  state Exp;
branches ;
next     1.6;

1.6
date     91.04.29.21.58.59;  author julian;  state Exp;
branches ;
next     1.5;

1.5
date     91.04.20.16.17.57;  author julian;  state Exp;
branches ;
next     1.4;

1.4
date     91.04.20.12.28.46;  author julian;  state Exp;
branches ;
next     1.3;

1.3
date     91.04.20.03.03.04;  author julian;  state Exp;
branches ;
next     1.2;

1.2
date     91.04.19.23.12.39;  author julian;  state Exp;
branches ;
next     1.1;

1.1
date     91.04.19.23.11.22;  author julian;  state Exp;
branches ;
next     1.0;

1.0
date     91.04.19.22.51.56;  author julian;  state Exp;
branches ;
next     ;


desc
@Initial checkin of gs_faccess.c.
@


1.9
log
@Update
@
text
@/*
* gs_faccess - test accessability of a file by a given user
*
* JSC
*/
#include "gs.h"
#include <string.h>
#include <pwd.h>
#include <sys/stat.h>

#define USR 	05700	     /* users bits include set-uid, sticky */
#define GRP 	02070	     /* group bits include set-gid */
#define OTH 	00007
#define ALL 	00777

#define READ 	00444
#define WRITE 	00222
#define EXEC    00111
#define SETID   06000
#define STICKY  01000

static int setperms();

int     gs_faccess(file, mode, arg)
char   *file;
char   *mode;
char   *arg;
{
	char   *path = NULL; /* pathname of file to be checked */
	char   *name = NULL; /* optional name of user */
	char    permstr[32], *pp;	/* perms on command line */
	int     perms = 0;   /* permissions default to r */
	int     setwho = 1;  /* set who via -ugo, FALSE with -n */
	int     uid = 0;
	int 	gid = 0;
	int     i = 0;
	int     chkown = 0;
	int     chkgrp = 0;
	int     verbose = 0;
	int     done = 0;
	char   *owner = NULL;
	char   *group = NULL;
	struct stat statbuf;
	struct passwd *pass;
	struct passwd *getpwnam();

	path = file;
	done = 0;
	chkown = 0;
	chkgrp = 0;
	verbose = 0;
	pp = &permstr[0];

	for (i = 0; done == 0 && mode[i] != '\0'; i++) {
		switch (mode[i]) {
		case ('O'):
			chkown = 1;
			owner = arg;
			done = 1;
			break;
		case ('G'):
			chkgrp = 1;
			group = arg;
			done = 1;
			break;
		case ('v'):
			verbose = 1;
			break;
		case ('n'):
			name = arg;
			setwho = 0;
			done = 1;
			break;
		case ('r'):
		case ('w'):
		case ('x'):
		case ('s'):
		case ('t'):
		case ('u'):
		case ('g'):
		case ('o'):
		case ('a'):
			*pp++ = mode[i];
			break;
		default:
			return (GS_FAIL);
		}
	}
	*pp = '\0';

	if (path == NULL) {  /* pathname is mandatory */
		return (GS_FAIL);
	}

	if ((perms == 0) &&  /* if no numeric perms, try letters */
		(chkown == 0) &&
		(chkgrp == 0))
		if ((perms = setperms(permstr, setwho)) == GS_FAIL) {
			return (GS_FAIL);
		}

	if (name != NULL) {  /* if user specified, set uid,gid */
		if ((pass = getpwnam(name)) == NULL) {
			return (GS_FAIL);
		}
		uid = pass->pw_uid;
		gid = pass->pw_gid;

		if (setgid(gid) < 0) {	/* set group ID first, while UID root */
			return (GS_FAIL);
		}
		if (setuid(uid) < 0) {	/* now set user ID */
			return (GS_FAIL);
		}
	}
	if (stat(path, &statbuf) < 0) {	/* stat the file */
		return (GS_FAIL);
	}
	if (chkown) {
		if ((pass = getpwnam(owner)) == NULL) {
			return (GS_FAIL);
		}
		if (statbuf.st_uid == pass->pw_uid)
			return (GS_SUCCESS);
		else {
			return (GS_FAIL);
		}
	}
	if (chkgrp) {
		if ((pass = getpwnam(group)) == NULL) {
			return (GS_FAIL);
		}
		if (statbuf.st_gid == pass->pw_gid)
			return (GS_SUCCESS);
		else {
			return (GS_FAIL);
		}
	}

	if (name != NULL) {  /* if who specified by name *//* check how user
			      * can access file */
		if (statbuf.st_uid == uid)
			perms &= USR;
		else if (statbuf.st_gid == gid)
			perms &= GRP;
		else
			perms &= OTH;
	}

	if ((statbuf.st_mode & perms) != perms) {
		return (GS_FAIL);
	}
	return (GS_SUCCESS);
}

/*
**  Given a string of characters '[rwxstugoa]*', return the corresponding
**   set of permissions.  e.g. urx (User Read and eXecute) returns 00500
*/
static int setperms(perm, setwho)
char   *perm;
int     setwho;
{
	int     i;
	int     tperms = 0;
	int     whomask = 0;

	for (i = 0; i < strlen(perm); i++)
		switch (perm[i]) {
		case ('r'):
			tperms |= READ;
			break;
		case ('w'):
			tperms |= WRITE;
			break;
		case ('x'):
			tperms |= EXEC;
			break;
		case ('s'):
			tperms |= SETID;
			break;
		case ('t'):
			tperms |= STICKY;
			break;
		case ('u'):
			whomask |= USR;
			break;
		case ('g'):
			whomask |= GRP;
			break;
		case ('o'):
			whomask |= OTH;
			break;
		case ('a'):
			whomask |= ALL;
			break;
		default:
			printf("bad %x\n", perm[i]);
			return (GS_FAIL);
		}
	if (tperms == 0)
		tperms = READ;	/* permissions default to read */

	if (whomask == 0)
		whomask = USR;	/* who defaults to user */

	if (setwho)
		return (tperms & whomask);
	else
		return (tperms);
}
@


1.8
log
@Update
@
text
@d4 1
@


1.7
log
@Reformat to indentation 8 for readability
@
text
@d21 1
a21 2
static int octal(), setperms();
static char errstr[255];
d33 7
a39 6
	int     uid, gid;
	int     i;
	int     chkown;
	int     chkgrp;
	int     verbose;
	int     done;
a152 14
}

/*
**  Convert an ASCII string of octal digits into an integer
*/
static int octal(str)
char   *str;
{
	register c, num;

	num = 0;
	while ((c = *str++) >= '0' && c <= '7')
		num = (num << 3) + (c - '0');
	return (num);
@


1.6
log
@.
@
text
@d29 16
a44 16
    char   *path = NULL;     /* pathname of file to be checked */
    char   *name = NULL;     /* optional name of user */
    char    permstr[32], *pp;/* perms on command line */
    int     perms = 0;	     /* permissions default to r */
    int     setwho = 1;	     /* set who via -ugo, FALSE with -n */
    int     uid, gid;
    int     i;
    int     chkown;
    int     chkgrp;
    int     verbose;
    int     done;
    char   *owner = NULL;
    char   *group = NULL;
    struct stat statbuf;
    struct passwd *pass;
    struct passwd *getpwnam();
d46 6
a51 6
    path = file;
    done = 0;
    chkown = 0;
    chkgrp = 0;
    verbose = 0;
    pp = &permstr[0];
d53 34
a86 33
    for (i = 0; done == 0 && mode[i] != '\0'; i++) {
	switch (mode[i]) {
	case ('O'):
	    chkown = 1;
	    owner = arg;
	    done = 1;
	    break;
	case ('G'):
	    chkgrp = 1;
	    group = arg;
	    done = 1;
	    break;
	case ('v'):
	    verbose = 1;
	    break;
	case ('n'):
	    name = arg;
	    setwho = 0;
	    done = 1;
	    break;
	case ('r'):
	case ('w'):
	case ('x'):
	case ('s'):
	case ('t'):
	case ('u'):
	case ('g'):
	case ('o'):
	case ('a'):
	    *pp++ = mode[i];
	    break;
	default:
	    return (GS_FAIL);
d88 1
a88 2
    }
    *pp = '\0';
d90 2
a91 9
    if (path == NULL) {	     /* pathname is mandatory */
	return (GS_FAIL);
    }

    if ((perms == 0) &&	     /* if no numeric perms, try letters */
	(chkown == 0) &&
	(chkgrp == 0))
	if ((perms = setperms(permstr, setwho)) == GS_FAIL) {
	    return (GS_FAIL);
d94 6
a99 6
    if (name != NULL) {	     /* if user specified, set uid,gid */
	if ((pass = getpwnam(name)) == NULL) {
	    return (GS_FAIL);
	}
	uid = pass->pw_uid;
	gid = pass->pw_gid;
d101 13
a113 2
	if (setgid(gid) < 0) {	/* set group ID first, while UID root */
	    return (GS_FAIL);
d115 2
a116 2
	if (setuid(uid) < 0) {	/* now set user ID */
	    return (GS_FAIL);
d118 9
a126 7
    }
    if (stat(path, &statbuf) < 0) {	/* stat the file */
	return (GS_FAIL);
    }
    if (chkown) {
	if ((pass = getpwnam(owner)) == NULL) {
	    return (GS_FAIL);
d128 9
a136 4
	if (statbuf.st_uid == pass->pw_uid)
	    return (GS_SUCCESS);
	else {
	    return (GS_FAIL);
a137 11
    }
    if (chkgrp) {
	if ((pass = getpwnam(group)) == NULL) {
	    return (GS_FAIL);
	}
	if (statbuf.st_gid == pass->pw_gid)
	    return (GS_SUCCESS);
	else {
	    return (GS_FAIL);
	}
    }
d139 1
a139 1
    if (name != NULL) {	     /* if who specified by name *//* check how user
d141 7
a147 7
	if (statbuf.st_uid == uid)
	    perms &= USR;
	else if (statbuf.st_gid == gid)
	    perms &= GRP;
	else
	    perms &= OTH;
    }
d149 4
a152 4
    if ((statbuf.st_mode & perms) != perms) {
	return (GS_FAIL);
    }
    return (GS_SUCCESS);
d161 1
a161 1
    register c, num;
d163 4
a166 4
    num = 0;
    while ((c = *str++) >= '0' && c <= '7')
	num = (num << 3) + (c - '0');
    return (num);
d177 3
a179 3
    int     i;
    int     tperms = 0;
    int     whomask = 0;
d181 35
a215 35
    for (i = 0; i < strlen(perm); i++)
	switch (perm[i]) {
	case ('r'):
	    tperms |= READ;
	    break;
	case ('w'):
	    tperms |= WRITE;
	    break;
	case ('x'):
	    tperms |= EXEC;
	    break;
	case ('s'):
	    tperms |= SETID;
	    break;
	case ('t'):
	    tperms |= STICKY;
	    break;
	case ('u'):
	    whomask |= USR;
	    break;
	case ('g'):
	    whomask |= GRP;
	    break;
	case ('o'):
	    whomask |= OTH;
	    break;
	case ('a'):
	    whomask |= ALL;
	    break;
	default:
	    printf("bad %x\n", perm[i]);
	    return (GS_FAIL);
	}
    if (tperms == 0)
	tperms = READ;	     /* permissions default to read */
d217 2
a218 2
    if (whomask == 0)
	whomask = USR;	     /* who defaults to user */
d220 4
a223 4
    if (setwho)
	return (tperms & whomask);
    else
	return (tperms);
@


1.5
log
@*** empty log message ***
@
text
@d10 2
a11 2
#define USR 	05700	/* users bits include set-uid, sticky */
#define GRP 	02070	/* group bits include set-gid */
d21 2
a22 2
static int octal(),setperms();
static	char	errstr[255];
d24 4
a27 4
int gs_faccess(file,mode,arg)
char *file;
char *mode;
char *arg;
d29 16
a44 16
	char 	*path = NULL;		/* pathname of file to be checked */
	char 	*name = NULL;		/* optional name of user */
	char	permstr[32],*pp;	/* perms on command line */
	int	 perms = 0;		/* permissions default to r */
	int	 setwho = 1;		/* set who via -ugo, FALSE with -n */
	int 	 uid, gid;
	int	 i;
	int	 chkown;
	int 	chkgrp;
	int	 verbose;
	int     done;
	char	*owner = NULL;
	char	*group = NULL;
struct  stat 	 statbuf;	
struct	passwd	*pass;
struct	passwd	*getpwnam();
d46 6
a51 6
	path = file;
	done = 0;
	chkown = 0;
	chkgrp = 0;
	verbose=0;
	pp = &permstr[0];
d53 33
a85 35
	for (i=0; done ==  0 && mode[i] != '\0'; i++) {
      	    switch(mode[i])
            {
		case ('O'):
			chkown = 1;
			owner = arg;
			done = 1;
			break;
		case ('G'):
			chkgrp = 1;
			group = arg;
			done = 1;
			break;
		case ('v'):
			verbose = 1;
			break;
          	case ('n'):
			name = arg;
			setwho = 0;
			done = 1;
			break;
		case ('r'):
		case ('w'):
		case ('x'):
		case ('s'):
		case ('t'):
		case ('u'):
		case ('g'):
		case ('o'):
		case ('a'): 
			*pp++ = mode[i];
			break;
          	default:
			return(GS_FAIL);
            }
d87 2
a88 5
	*pp = '\0';
	
	if (path == NULL)  {		/* pathname is mandatory */
	    return(GS_FAIL);
      	}
d90 3
a92 16
	if ((perms == 0) &&		/* if no numeric perms, try letters */
	    (chkown == 0) && 
	    (chkgrp == 0))
	    if ((perms = setperms(permstr, setwho)) == GS_FAIL)
	    {
	       return(GS_FAIL);
	    }
	
	if (name != NULL)		/* if user specified, set uid,gid */
	{
	    if ((pass = getpwnam(name)) == NULL)
	    {
		   return(GS_FAIL);
	    }
	    uid = pass->pw_uid;
	    gid = pass->pw_gid;
d94 5
a98 8
	    if (setgid(gid) < 0)	/* set group ID first, while UID root */
	    {
	       return(GS_FAIL);
	    }
	    if (setuid(uid) < 0)	/* now set user ID */
	    {
	       return(GS_FAIL);
	    }	
d100 4
a103 3
	if (stat(path, &statbuf) < 0)		/* stat the file */
	{
	       return(GS_FAIL);
d105 2
a106 20
	if (chkown) {
		if ((pass = getpwnam(owner)) == NULL) {
		       return(GS_FAIL);
	        }
		if (statbuf.st_uid == pass->pw_uid)
		       return(GS_SUCCESS);
		else {
			return(GS_FAIL);
		}
	}
	if (chkgrp) {
		if ((pass = getpwnam(group)) == NULL) {
		    return(GS_FAIL);
	        }
		if (statbuf.st_gid == pass->pw_gid)
			return(GS_SUCCESS);
		else {
			return(GS_FAIL);
		}
	}	
d108 2
a109 8
	if (name != NULL) 	/* if who specified by name */
	{			/* check how user can access file */
	    if (statbuf.st_uid == uid)
		perms &= USR;
	    else if (statbuf.st_gid == gid)
		perms &= GRP;
	    else
		perms &= OTH;
d111 27
d139 14
a152 5
	if ((statbuf.st_mode & perms) != perms)
	{
		return(GS_FAIL);
	}
	return(GS_SUCCESS);	
d156 1
a156 1
**  Convert an ASCII string of octal digits into an integer 
d159 1
a159 1
char *str;
d161 1
a161 1
        register c, num;
d163 4
a166 4
        num = 0;
        while ((c = *str++) >= '0' && c <= '7')
                num = (num << 3) + (c - '0');
        return(num);
d174 2
a175 2
char *perm;
int setwho;
d177 3
a179 3
	int i;
	int tperms = 0;
	int whomask = 0;
d181 35
a215 16
	for (i = 0; i < strlen(perm); i++) 
	    switch(perm[i]) 
	    {
	        case ('r'): tperms |= READ; break;
	        case ('w'): tperms |= WRITE; break;
	        case ('x'): tperms |= EXEC; break;
	        case ('s'): tperms |= SETID; break;
		case ('t'): tperms |= STICKY; break;
		case ('u'): whomask |= USR; break;
		case ('g'): whomask |= GRP; break;
		case ('o'): whomask |= OTH; break;
		case ('a'): whomask |= ALL; break;
	        default: printf("bad %x\n", perm[i]); return(GS_FAIL);
	    }
	if (tperms == 0)
	    tperms = READ;		/* permissions default to read */
d217 2
a218 2
	if (whomask == 0)
	    whomask = USR;		/* who defaults to user */
d220 4
a223 4
	if (setwho)
		return(tperms & whomask);
	else
		return(tperms);
@


1.4
log
@*** empty log message ***
@
text
@d31 1
a31 1
	char	permstr[16];		/* perms on command line */
d36 3
a38 3
	char	 chkown, chkgrp;
	char	 verbose;
	char	*owner;
d40 2
a41 1
	char	*group;
d48 5
d83 1
a83 1
			permstr[i] = mode[i];
d89 1
a89 1
	permstr[i+1]='\0';
@


1.3
log
@*** empty log message ***
@
text
@d24 1
a24 1
int gs_access(file,mode,arg)
d31 1
a31 1
	char	*permstr = "";		/* perms on command line */
d50 29
a78 7
		case ('O'): chkown = 1; owner = arg; done = 1;break;
		case ('G'): chkgrp = 1; group = arg; done = 1;break;
		case ('v'): verbose = 1; break;
          	case ('n'): name = arg; setwho = 0;done = 1; break;
		case ('r'): case ('w'): case ('x'): case ('s'): case ('t'):
		case ('u'): case ('g'): case ('o'): case ('a'): 
			permstr = strcat(permstr,mode[i]); break;
d80 1
a80 1
			return(-1);
d83 1
d85 2
a86 3
	if (path == NULL)		/* pathname is mandatory */
      	{
	    return(-1);
d92 1
a92 1
	    if ((perms = setperms(permstr, setwho)) == -1)
d94 1
a94 1
	       return(-1);
d101 1
a101 1
		   return(-1);
d108 1
a108 1
	       return(-1);
d112 1
a112 1
	       return(-1);
d117 1
a117 1
	       return(-1);
d121 1
a121 1
		       return(-1);
d124 1
a124 1
		       return(0);
d126 1
a126 1
			return(1);
d131 1
a131 1
		    return(1);
d134 1
a134 1
			return(0);
d136 1
a136 1
			return(1);
d152 1
a152 1
		return(1);
d154 1
a154 1
	return(0);	
d195 1
a195 1
	        default: printf("bad %x\n", perm[i]); return(-1);
a207 2


@


1.2
log
@*** empty log message ***
@
text
@d21 1
d138 1
a138 1
octal(str)
d153 1
a153 1
setperms(perm, setwho)
a187 6
usage(name)
char *name;
{
  fprintf(stderr, "usage: %s [-rwxugoa] [-n user] [-m modes] [-O owner] [-G group] file\n",
           name);
}
@


1.1
log
@*** empty log message ***
@
text
@d25 1
a25 1
int mode;
@


1.0
log
@Initial
@
text
@a0 1

d2 2
a3 21
** Copyright (c) 1987 by Oracle Corporation.
**
** access - test accessability of a file by a given user
**
** The user running the access test may not be the user for which access
** is to be checked, so this program must change its user-id and group-id.
** This change to an arbitrary effective user and group id can only be done
** by the "super-user". This program needs to be run with the ownership
** of root and the "set uid" bit 'on'. The recommended mode of this program
** 4711 (-rws--x--x) which only allows this program to be "executed" but
** not copied.
**
** PLEASE NOTE: Any program with a set uid bit set is a POTENTIAL security
**              problem and needs to be carefully controlled.
**
** Compile: cc -O access.c -o access
**
** Flags:
**   -O owner file	return 0 if owner owns file, else 1
**   -G group file	return 0 if group is file's group, else 1
**   -v			for -O and -G, print err message if returning 1
d5 1
a5 2

#include <stdio.h>
a7 1
#include <sys/types.h>
d23 4
a26 4
main(argc, argv, env)
int argc;
char **argv;
char **env;
d38 1
a39 1
	char	*prgn = argv[0];
d44 4
a47 3
  	for (i=1; i<argc; ++i)		/* parse command line */
    	  if (*argv[i]=='-')
      	    switch(*(argv[i]+1))
d49 2
a50 2
		case ('O'): chkown = 1; owner = argv[++i]; break;
		case ('G'): chkgrp = 1; group = argv[++i]; break;
d52 1
a52 2
          	case ('m'): perms = octal(argv[++i]); break;
          	case ('n'): name = argv[++i]; setwho = 0; break;
d55 3
a57 3
			permstr = strcat(permstr,argv[i]+1); break;
          	default: usage(argv[0]);
                   	 exit(1);
d59 1
a59 7
    	    else if (path == NULL) 	/* arg with no flag is path */
		path = argv[i];
	    else
      	    {
        	usage(argv[0]);
        	exit(1);
      	    }  
d63 1
a63 2
            usage(argv[0]);
            exit(1);
d71 1
a71 2
	        usage(argv[0]);
	        exit(1);
d78 1
a78 3
		sprintf(errstr,"%s: cannot find uid for user %s", prgn, name);
		perror(errstr);
		exit(1);
d85 1
a85 4
		sprintf(errstr,"%s: cannot set gid %d for user %s", 
			prgn, gid, name);
		perror(errstr);
		exit(1);
d89 1
a89 4
		sprintf(errstr,"%s: cannot set uid %d for user %s", 
			prgn, uid,  name);
		perror(errstr);
		exit(1);
d94 1
a94 3
		sprintf(errstr,"%s: cannot stat %s", prgn, path);
		perror(errstr);
		exit(1);
d98 1
a98 4
		    sprintf(errstr,"%s: cannot find uid for user %s", 
				prgn, name);
		    perror(errstr);
		    exit(1);
d101 1
a101 1
			exit(0);
d103 1
a103 4
			if (verbose)
				printf("ERROR: %s does not have owner %s\n",
					path, owner);
			exit(1);
d108 1
a108 4
		    sprintf(errstr,"%s: cannot find gid for user %s", 
				prgn, name);
		    perror(errstr);
		    exit(1);
d111 1
a111 1
			exit(0);
d113 1
a113 4
			if (verbose)
				printf("ERROR: %s does not have group %s\n",
					path, group);
			exit(1);
d129 1
a129 2
		fprintf(stderr,"%s: cannot access %s\n", prgn, path);
		exit(1);
d131 1
a131 1
	exit(0);	
@
