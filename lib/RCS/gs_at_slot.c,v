head	1.6;
access;
symbols;
locks
	julian:1.6; strict;
comment	@ * @;


1.6
date	91.05.03.21.39.53;	author julian;	state Exp;
branches;
next	1.5;

1.5
date	91.04.30.09.49.08;	author julian;	state Exp;
branches;
next	1.4;

1.4
date	91.04.29.21.58.06;	author julian;	state Exp;
branches;
next	1.3;

1.3
date	91.04.29.10.47.18;	author julian;	state Exp;
branches;
next	1.2;

1.2
date	91.04.24.22.36.14;	author julian;	state Exp;
branches;
next	1.1;

1.1
date	91.04.24.18.15.19;	author julian;	state Exp;
branches;
next	1.0;

1.0
date	91.04.24.16.41.05;	author julian;	state Exp;
branches;
next	;


desc
@Initial checkin of gs_at_slot.c.
@


1.6
log
@Reformat to indentation 8 for readability
@
text
@#include "gs.h"
#include <fcntl.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

/****************************************************************************
    GeoShare Subroutine Library -  Shared Memory Tools.

Module: GS_AT_SLOT

Description:
	Attach to a communications slot.  A slot is composed of two semaphores
	and a buffer.  This routine attaches to a region of shared memory
	formatted as a slot that has been previously created.  Two semaphores
	are also attached in the slot.

	A key is given in the parameter list that is used to identify the
	shared memory segment, and semaphores to attach to.

Usage:
	GSKey_t *key;
	GSSlot_t slot;

	status = gs_attach_slot(key,&slot);

	
Parameters:
	INPUT:
		GSKey_t *key		- Memory identifier key pointer.

	OUTPUT:
		char **pslot		- Pointer to slot attached.

Status:

	This routine returns GS_SUCCESS or GS_FAIL;

Author:
	Julian Carlisle 	 Wed Apr 24 03:38:02 PDT 1991
*****************************************************************************/

int     gs_attach_slot(key, pslot)
GSKey_t *key;
GSSlot_t **pslot;
{
	int     status = GS_SUCCESS;
	int     id = 0;
	int     debug = FALSE;

	if (key == (GSKey_t *) 0) {
		gs_log("gs_attach_slot: Null key.");
		return (GS_FAIL);
	}

 /* Create shared memory segment, return its id.	 */
	id = shmget(key->key, sizeof(GSSlot_t), 0);
	if (id < 0) {
		gs_log("gs_attach_slot:Cannot attach shared memory for slot.");
		return (GS_FAIL);
	}


 /* Attach the shared memory, let the system 	 */
 /* choose the address at which the memory is 	 */
 /* attached.  This is more portable.		 */
	*pslot = (GSSlot_t *) shmat(id, (char *) 0, 0);
	if (*pslot == (GSSlot_t *) -1) {
		gs_log("gs_attach_slot:Cannot attach shared memory.");
		return (GS_FAIL);
	}

	debug = (getenv("GSDEBUG") != NULL) ? TRUE : FALSE;

 /* Create the slot lock semaphore. 	 */
	(*pslot)->locksem = gs_sem_open(key->key);
	if ((*pslot)->locksem < 0) {
		gs_log("gs_attach_slot:Cannot open lock semaphore");
		return (GS_FAIL);
	}

 /* Create the slot message semaphore. 	 */
	(*pslot)->msgsem = gs_sem_open(key->key + 4);
	if ((*pslot)->msgsem < 0) {

	/* remove the semaphore open above. 	 */
		gs_sem_close((*pslot)->locksem);

		gs_log("gs_attach_slot:Cannot attach msg semaphore");
		return (GS_FAIL);
	}

 /* Create the slot message semaphore. 	 */
	(*pslot)->cmsem = gs_sem_open(key->key + 8);
	if ((*pslot)->cmsem < 0) {

	/* remove the semaphore opened above. 	 */
		gs_sem_close((*pslot)->locksem);
		gs_sem_close((*pslot)->msgsem);

		gs_log("gs_attach_slot:Cannot open cm semaphore");
		return (GS_FAIL);
	}
	(*pslot)->id = id;

	return (GS_SUCCESS);
}
@


1.5
log
@*** empty log message ***
@
text
@d47 3
a49 3
    int     status = GS_SUCCESS;
    int     id = 0;
    int     debug = FALSE;
d51 4
a54 4
    if (key == (GSKey_t *) 0) {
	gs_log("gs_attach_slot: Null key.");
	return (GS_FAIL);
    }
d57 5
a61 5
    id = shmget(key->key, sizeof(GSSlot_t), 0);
    if (id < 0) {
	gs_log("gs_attach_slot:Cannot attach shared memory for slot.");
	return (GS_FAIL);
    }
d67 5
a71 5
    *pslot = (GSSlot_t *) shmat(id, (char *) 0, 0);
    if (*pslot == (GSSlot_t *) -1) {
	gs_log("gs_attach_slot:Cannot attach shared memory.");
	return (GS_FAIL);
    }
d73 1
a73 1
    debug = (getenv("GSDEBUG") != NULL) ? TRUE : FALSE;
d76 5
a80 5
    (*pslot)->locksem = gs_sem_open(key->key);
    if ((*pslot)->locksem < 0) {
	gs_log("gs_attach_slot:Cannot open lock semaphore");
	return (GS_FAIL);
    }
d83 2
a84 2
    (*pslot)->msgsem = gs_sem_open(key->key + 4);
    if ((*pslot)->msgsem < 0) {
d86 2
a87 2
    /* remove the semaphore open above. 	 */
	gs_sem_close((*pslot)->locksem);
d89 3
a91 3
	gs_log("gs_attach_slot:Cannot attach msg semaphore");
	return (GS_FAIL);
    }
d94 2
a95 2
    (*pslot)->cmsem = gs_sem_open(key->key + 8);
    if ((*pslot)->cmsem < 0) {
d97 3
a99 3
    /* remove the semaphore opened above. 	 */
	gs_sem_close((*pslot)->locksem);
	gs_sem_close((*pslot)->msgsem);
d101 4
a104 4
	gs_log("gs_attach_slot:Cannot open cm semaphore");
	return (GS_FAIL);
    }
    (*pslot)->id = id;
d106 1
a106 1
    return (GS_SUCCESS);
@


1.4
log
@*** empty log message ***
@
text
@a73 2
    if (debug)
	gs_log("gs_attach_slot:Slot address is %d\n", (int) *pslot);
@


1.3
log
@*** empty log message ***
@
text
@d19 1
a19 1
	shared memory segment, and semaphores to attach to.  
d43 1
a43 1
int gs_attach_slot(key,pslot)
d47 3
a49 3
int status = GS_SUCCESS;
int id = 0;
int debug = FALSE;
d51 4
a54 4
	if (key == (GSKey_t *)0) {
		gs_log("gs_attach_slot: Null key.");
		return (GS_FAIL);
	}
d56 6
a61 6
			/* Create shared memory segment, return its id.	*/
	id = shmget(key->key,sizeof(GSSlot_t),0);
	if (id < 0) {
		gs_log("gs_attach_slot:Cannot attach shared memory for slot.");
		return (GS_FAIL);
	}
d64 8
a71 8
			/* Attach the shared memory, let the system 	*/
			/* choose the address at which the memory is 	*/
			/* attached.  This is more portable.		*/
	*pslot = (GSSlot_t *) shmat(id, (char *)0,0);
	if (*pslot == (GSSlot_t *) - 1) {
		gs_log("gs_attach_slot:Cannot attach shared memory.");
		return (GS_FAIL);
	}
d73 3
a75 3
    	debug = (getenv("GSDEBUG") != NULL) ? TRUE : FALSE;
	if (debug)
		gs_log("gs_attach_slot:Slot address is %d\n", (int) *pslot);
d77 6
a82 6
			/* Create the slot lock semaphore. 	*/
	(*pslot)->locksem = gs_sem_open(key->key);
	if ((*pslot)->locksem < 0) {
		gs_log("gs_attach_slot:Cannot open lock semaphore");
		return (GS_FAIL);
	}
d84 3
a86 3
			/* Create the slot message semaphore. 	*/
	(*pslot)->msgsem = gs_sem_open(key->key + 4);
	if ((*pslot)->msgsem < 0) {
d88 2
a89 2
			/* remove the semaphore open above. 	*/
		gs_sem_close((*pslot)->locksem);
d91 3
a93 3
		gs_log("gs_attach_slot:Cannot attach msg semaphore");
		return (GS_FAIL);
	}
d95 3
a97 3
			/* Create the slot message semaphore. 	*/
	(*pslot)->cmsem = gs_sem_open(key->key + 8);
	if ((*pslot)->cmsem < 0) {
d99 3
a101 3
			/* remove the semaphore opened above. 	*/
		gs_sem_close((*pslot)->locksem);
		gs_sem_close((*pslot)->msgsem);
d103 4
a106 4
		gs_log("gs_attach_slot:Cannot open cm semaphore");
		return (GS_FAIL);
	}
	(*pslot)->id = id;
d108 1
a108 1
	return (GS_SUCCESS);
@


1.2
log
@*** empty log message ***
@
text
@d49 1
d63 1
d73 3
a75 1
	gs_log("gs_attach_slot:Slot address is %d\n", (int) *pslot);
a90 5
			/* remove the shared memory segment	*/
		if (shmctl(id,IPC_RMID,(struct shmid_ds *)0) < 0) {
			gs_log("gs_attach_slot:Cannot remove shared mem.");
		}

a101 5

			/* remove the shared memory segment	*/
		if (shmctl(id,IPC_RMID,(struct shmid_ds *)0) < 0) {
			gs_log("gs_attach_slot:Cannot remove shared mem.");
		}
@


1.1
log
@*** empty log message ***
@
text
@d81 1
a81 1
	(*pslot)->msgsem = gs_sem_open(key->key + 1, 0);
a95 1
#if 0
d97 1
a97 1
	(*pslot)->cmsem = gs_sem_open(key->key + 2, 0);
a111 1
#endif
@


1.0
log
@Initial
@
text
@d25 1
a25 1
	status = gs_attach_slot.c(key,&slot);
d33 1
a33 1
		char **pslot		- Pointer to slot allocated.
d58 1
a58 1
		gs_log("gs_attach_slot:Cannot alloc shared memory for slot.");
d76 1
a76 1
		gs_log("gs_attach_slot:Cannot create lock semaphore");
d81 1
a81 1
	(*pslot)->msgsem = gs_sem_create(key->key + 1, 0);
d84 1
a84 1
			/* remove the semaphore created above. 	*/
d92 1
a92 1
		gs_log("gs_attach_slot:Cannot create msg semaphore");
d98 1
a98 1
	(*pslot)->cmsem = gs_sem_create(key->key + 2, 0);
d101 1
a101 1
			/* remove the semaphore created above. 	*/
d110 1
a110 1
		gs_log("gs_attach_slot:Cannot create cm semaphore");
@
