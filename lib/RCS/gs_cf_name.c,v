head     1.6;
branch   ;
access   ;
symbols  ;
locks    julian:1.6; strict;
comment  @ * @;


1.6
date     91.05.11.23.08.38;  author julian;  state Exp;
branches ;
next     1.5;

1.5
date     91.05.09.07.56.34;  author julian;  state Exp;
branches ;
next     1.4;

1.4
date     91.05.06.13.04.00;  author julian;  state Exp;
branches ;
next     1.3;

1.3
date     91.05.03.21.39.53;  author julian;  state Exp;
branches ;
next     1.2;

1.2
date     91.04.29.21.58.59;  author julian;  state Exp;
branches ;
next     1.1;

1.1
date     91.04.29.03.51.38;  author julian;  state Exp;
branches ;
next     1.0;

1.0
date     91.04.29.03.41.02;  author julian;  state Exp;
branches ;
next     ;


desc
@Initial checkin of gs_cf_name.c.
@


1.6
log
@*** empty log message ***
@
text
@#include "gs.h"
#include <sys/stat.h>

/****************************************************************************
Module: GS_CF_NAME

Description:
     Returns the name of the configuration file used by the GeoShare
     connection manager.

     Determine the location of the gstab configuration file using
     the following guidelines:

        * The default config file is  $GSHOME/gstab

        * The environment variable GSCONFIG is search for, and if found
          supersedes the default spec.

        * If none of the above yields a valid config file spec a NULL
	pointer is returned. If the environment variable GSDEBUG is
	defined an error message is printed.


Usage:
        config_file = (char *)gs_cf_name(config_file);
        char **config_file;

Parameters:
        INPUT:
		None
        OUTPUT:
		char ** config_file;  	- ptr to char pointer to allocate

Status:
	a NULL pointer is returned if an error occurs.  Otherwise a pointer
	is returned to an internally allocated string buffer containing the
	name of the configuration file.

Author:
        Julian Carlisle        Sun Apr 28 20:18:12 PDT 1991
*****************************************************************************/
extern char *getenv();
extern char *gs_home();

char   *gs_cf_name(cfgfile)
char  *cfgfile;
{
	int     status = GS_SUCCESS;
	int     debug = FALSE;
	int     len = 0;
	char   *cp;
	static char config[256];
	static int firsttime = TRUE;
	struct stat statbuf;



	if (firsttime == FALSE) {
		if (cfgfile != (char *) 0) {
			len = strlen(config);
			strcpy(cfgfile, config);
		}
		return (config);
	}
	debug = gs_chk_debug();

 /*
  * Figure out where the GeoShare home directory is, if it is not specified
  * anywhere then set it to /tmp.
  */
	if ((cp = (char *) getenv("GSCONFIG")) != (char *) 0) {
		strcpy(config, cp);
	}
	else {
		cp = (char *) gs_home(NULL);
		if (cp == NULL)
			return ((char *) 0);
		sprintf(config, "%s/gstab", cp);
	}

 /* Check if whatever we got exists... */
	if (stat(config, &statbuf)) {
		if (debug)
			gs_log("gs_config_file: Can't find gstab file %s\n", config);
		status = GS_FAIL;
	}

	if (status == GS_SUCCESS && (cfgfile != (char *) 0)) {
		len = strlen(config);
		strcpy(cfgfile, config);
	}

	if (status == GS_SUCCESS) {
		firsttime = FALSE;
		return (config);
	}
	else
		return ((char *) 0);

}
@


1.5
log
@Update
@
text
@d46 1
a46 1
char  **cfgfile;
a51 2
	char    text[256];
	struct stat statbuf;
d54 1
d59 1
a59 1
		if (cfgfile != (char **) 0) {
d61 1
a61 2
			*cfgfile = (char *) malloc(sizeof(char) * len + 1);
			strcpy(*cfgfile, config);
d88 1
a88 1
	if (status == GS_SUCCESS && (cfgfile != (char **) 0)) {
d90 1
a90 2
		*cfgfile = (char *) malloc(sizeof(char) * len + 1);
		strcpy(*cfgfile, config);
@


1.4
log
@Update
@
text
@d54 1
a54 1
	static char    config[256];
d59 2
a60 2
	if (firsttime == FALSE)  {
		if ( cfgfile != (char **)0) {
@


1.3
log
@Reformat to indentation 8 for readability
@
text
@a52 1
	char    config[256];
d54 2
a56 1
	debug = (getenv("GSDEBUG") != NULL) ? TRUE : FALSE;
d58 11
d86 1
a86 1
			fprintf(stderr, "gs_config_file: Can't find gstab file %s\n", config);
d96 2
a97 1
	if (status == GS_SUCCESS)
d99 1
@


1.2
log
@.
@
text
@d48 7
a54 7
    int     status = GS_SUCCESS;
    int     debug = FALSE;
    int     len = 0;
    char   *cp;
    char    text[256];
    char    config[256];
    struct stat statbuf;
d56 1
a56 1
    debug = (getenv("GSDEBUG") != NULL) ? TRUE : FALSE;
d62 9
a70 9
    if ((cp = (char *) getenv("GSCONFIG")) != (char *) 0) {
	strcpy(config, cp);
    }
    else {
	cp = (char *) gs_home(NULL);
	if (cp == NULL)
	    return ((char *) 0);
	sprintf(config, "%s/gstab", cp);
    }
d73 5
a77 5
    if (stat(config, &statbuf)) {
	if (debug)
	    fprintf(stderr, "gs_config_file: Can't find gstab file %s\n", config);
	status = GS_FAIL;
    }
d79 5
a83 5
    if (status == GS_SUCCESS && (cfgfile != (char **) 0)) {
	len = strlen(config);
	*cfgfile = (char *) malloc(sizeof(char) * len + 1);
	strcpy(*cfgfile, config);
    }
d85 4
a88 4
    if (status == GS_SUCCESS)
	return (config);
    else
	return ((char *) 0);
@


1.1
log
@*** empty log message ***
@
text
@d10 1
a10 1
    
d20 1
a20 1
	pointer is returned. If the environment variable GSDEBUG is 
d23 1
a23 1
       
d45 1
a45 1
char *gs_cf_name(cfgfile)
d67 3
a69 3
	if (cp == NULL) 
		return((char *)0);
	sprintf(config,"%s/gstab",cp);
d71 1
a71 1
    
d75 1
a75 1
	    fprintf(stderr,"gs_config_file: Can't find gstab file %s\n",config);
d79 1
a79 1
    if (status == GS_SUCCESS && (cfgfile != (char **)0)) {
d81 1
a81 1
	*cfgfile = (char *)malloc(sizeof(char)*len+1);
d84 2
a85 2
    
    if (status == GS_SUCCESS) 
d88 1
a88 1
	return ((char *)0);
@


1.0
log
@Initial
@
text
@d5 1
a5 1
Module: GS_CONFIG_FILE
d25 1
a25 1
        config_file = (char *)gs_initconfig(config_file);
d45 1
a45 1
char *gs_config_file(cfgfile)
d67 2
@
