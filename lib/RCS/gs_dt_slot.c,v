head	1.1;
access;
symbols;
locks
	julian:1.1; strict;
comment	@ * @;


1.1
date	91.05.03.21.39.53;	author julian;	state Exp;
branches;
next	1.0;

1.0
date	91.04.30.05.05.45;	author julian;	state Exp;
branches;
next	;


desc
@Initial checkin of gs_dt_slot.c.
@


1.1
log
@Reformat to indentation 8 for readability
@
text
@#include "gs.h"
#include <fcntl.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>

/****************************************************************************
    GeoShare Subroutine Library -  Shared Memory Tools.

Module: GS_DT_SLOT

Description:
	Detach a communications slot.  A slot is composed of two semaphores
	and a buffer.  This routine detaches the shared memory associated
	with a slot after closing the semaphores in the slot.


Usage:
	GSSlot_t *pslot;

	status = gs_detach_slot(pslot);

	
Parameters:
	INPUT:
		GSSlot_t *pslot		- Address of slot to detach.
	OUTPUT:
		None.

Status:

	This routine will return GS_SUCCESS or GS_FAIL.

Author:
	Julian Carlisle 	 Wed Apr 24 03:49:06 PDT 1991
*****************************************************************************/

extern int errno;

int     gs_detach_slot(pslot)
GSSlot_t *pslot;
{
	int     status = GS_SUCCESS;
	int     id = 0;

	errno = 0;
	if (pslot == (GSSlot_t *) 0) {
		gs_log("gs_detach_slot: Null slot pointer.");
		return (GS_FAIL);
	}

	gs_sem_close(pslot->locksem);
	gs_sem_close(pslot->msgsem);
	gs_sem_close(pslot->cmsem);

	if (gs_free(pslot) < 0) {
		gs_log("gs_detach_slot:Cannot detach shared memory %d", pslot);
		return (GS_FAIL);
	}

	return (GS_SUCCESS);
}
@


1.0
log
@Initial
@
text
@d44 2
a45 2
    int     status = GS_SUCCESS;
    int     id = 0;
d47 5
a51 5
    errno = 0;
    if (pslot == (GSSlot_t *) 0) {
	gs_log("gs_detach_slot: Null slot pointer.");
	return (GS_FAIL);
    }
d53 3
a55 8
    gs_sem_close(pslot->locksem);
    gs_sem_close(pslot->msgsem);
    gs_sem_close(pslot->cmsem);
    
    if (gs_free(pslot) < 0) {
	gs_log("gs_detach_slot:Cannot detach shared memory %d", pslot);
	return (GS_FAIL);
    }
d57 6
a62 1
    return (GS_SUCCESS);
@
