head     1.8;
branch   ;
access   ;
symbols  ;
locks    julian:1.8; strict;
comment  @ * @;


1.8
date     91.05.20.04.27.17;  author julian;  state Exp;
branches ;
next     1.7;

1.7
date     91.05.12.01.43.08;  author julian;  state Exp;
branches ;
next     1.6;

1.6
date     91.05.09.07.56.46;  author julian;  state Exp;
branches ;
next     1.5;

1.5
date     91.05.08.22.59.41;  author julian;  state Exp;
branches ;
next     1.4;

1.4
date     91.05.06.13.04.10;  author julian;  state Exp;
branches ;
next     1.3;

1.3
date     91.05.03.21.39.53;  author julian;  state Exp;
branches ;
next     1.2;

1.2
date     91.04.29.21.58.59;  author julian;  state Exp;
branches ;
next     1.1;

1.1
date     91.04.29.02.51.19;  author julian;  state Exp;
branches ;
next     1.0;

1.0
date     91.04.29.02.43.20;  author julian;  state Exp;
branches ;
next     ;


desc
@Initial checkin of gs_home.c.
@


1.8
log
@Update
@
text
@#include "gs.h"
#include <sys/stat.h>

/****************************************************************************
Module: GS_HOME

Description:

     Get the homedirectory specification from the environment,
     assign one if none is defined.

     Determine the location of the GeoShare product home directory using the
     following guidlines:

          * Check for GSHOME environment variable, use it if defined as
            a valid path.

          * If GSHOME is not defined, use the definition of GSDEFAULTHOME

          * If neither of the above yields a valid home dir spec., log the
            error message and return NULL.


Usage:
	char *homedir;

        homedir = gs_home(&homedir);

Parameters:
        INPUT:
		None

        OUTPUT:
		char **homedir		- Adress of char ptr to allocate.

Status:
	This routine returns a NULL pointer if an error occurs.  A message
	will be printed if the environment variable GSDEBUG is defined.


Author:
        Julian Carlisle          Fri Apr 20 06:09:42 PDT 1991
*****************************************************************************/

extern char *getenv();
extern char *getcwd();


char   *gs_home(homedir)
char   *homedir;
{
	int     status;
	int     debug = FALSE;
	int     len = 0;
	char   *cp = (char *) 0;
	char    home[512];
	char    text[512];
	struct stat statbuf;


	debug = gs_chk_debug();
	status = GS_SUCCESS;

 /* getcwd(cwd, sizeof cwd); */

 /*
  * Figure out where the GeoShare home directory is, if it is not specified
  * anywhere then set it to the default.
  */
	if ((cp = (char *) getenv("GSHOME")) != NULL) {
		strcpy(home, cp);
	}
	else {
		strcpy(home, GSDEFAULTHOME);
		sprintf(text,"%s/gstab",home);
		if (stat(text, &statbuf)) {
			status = GS_FAIL;
		}
		if (debug) {
			gs_log("gs_home:  Warning: GSHOME not defined.  Using %s", home);
		}

	}

 /* Check if whatever we got exists... */
	if (stat(home, &statbuf)) {
		gs_log("gs_home: Can't locate path: %s\n", home);
		status = GS_FAIL;
	}

 /* Check for permission to work in here... */
	if (gs_faccess(home, (char *) "rw", (char *) 0)) {
		if (debug)
			gs_log("gs_home: Directory %s is not r/w accessible.", home);
		status = GS_FAIL;
	}

	if (status == GS_SUCCESS && (homedir != (char *) 0)) {
		len = strlen(home);
		strcpy(homedir, home);
	}

	if (status == GS_SUCCESS)
		return (home);
	else
		return ((char *) 0);
}
@


1.7
log
@Update
@
text
@d57 1
d75 4
d82 1
@


1.6
log
@Update
@
text
@a55 1
	char    cwd[512];
a56 1
	char    cf[512];
@


1.5
log
@Update
@
text
@d50 1
a50 1
char  *homedir;
d77 1
a77 1
			gs_log("gs_home:  Warning: GSHOME not defined.  Using %s",home);
d83 1
a83 1
		gs_log( "gs_home: Can't locate path: %s\n", home);
@


1.4
log
@Update
@
text
@d50 1
a50 1
char  **homedir;
d77 1
a77 2
			fprintf(stderr, "gs_home:   Warning: GSHOME not defined.");
			fprintf(stderr, "gs_home:   Using %s", home);
d83 1
a83 2
		if (debug)
			fprintf(stderr, "gs_home: Can't locate path: %s\n", home);
d90 1
a90 2
			fprintf(stderr, "gs_home: Directory %s is not r/w accessible.",
				home);
d94 1
a94 1
	if (status == GS_SUCCESS && (homedir != (char **) 0)) {
d96 1
a96 2
		*homedir = (char *) malloc(sizeof(char) * len + 1);
		strcpy(*homedir, home);
@


1.3
log
@Reformat to indentation 8 for readability
@
text
@d52 1
a52 1
	int     status = GS_SUCCESS;
d62 2
a63 1
	debug = (getenv("GSDEBUG") != NULL) ? TRUE : FALSE;
@


1.2
log
@.
@
text
@d52 8
a59 8
    int     status = GS_SUCCESS;
    int     debug = FALSE;
    int     len = 0;
    char   *cp = (char *) 0;
    char    cwd[512];
    char    home[512];
    char    cf[512];
    struct stat statbuf;
d62 1
a62 1
    debug = (getenv("GSDEBUG") != NULL) ? TRUE : FALSE;
d70 2
a71 8
    if ((cp = (char *) getenv("GSHOME")) != NULL) {
	strcpy(home, cp);
    }
    else {
	strcpy(home, GSDEFAULTHOME);
	if (debug) {
	    fprintf(stderr, "gs_home:   Warning: GSHOME not defined.");
	    fprintf(stderr, "gs_home:   Using %s", home);
d73 7
a79 1
    }
d82 5
a86 5
    if (stat(home, &statbuf)) {
	if (debug)
	    fprintf(stderr, "gs_home: Can't locate path: %s\n", home);
	status = GS_FAIL;
    }
d89 6
a94 6
    if (gs_faccess(home, (char *) "rw", (char *) 0)) {
	if (debug)
	    fprintf(stderr, "gs_home: Directory %s is not r/w accessible.",
		home);
	status = GS_FAIL;
    }
d96 5
a100 5
    if (status == GS_SUCCESS && (homedir != (char **) 0)) {
	len = strlen(home);
	*homedir = (char *) malloc(sizeof(char) * len + 1);
	strcpy(*homedir, home);
    }
d102 4
a105 4
    if (status == GS_SUCCESS)
	return (home);
    else
	return ((char *) 0);
@


1.1
log
@*** empty log message ***
@
text
@d49 1
a49 1
char *gs_home(homedir)
d64 1
a64 1
    /* getcwd(cwd, sizeof cwd); */
d81 1
a81 1
		 /* Check if whatever we got exists... */
d88 1
a88 1
		 /* Check for permission to work in here... */
d92 1
a92 1
			home);
@


1.0
log
@Initial
@
text
@a18 1
            (normally /tmp).
d21 1
a21 1
            error message and return GS_FAIL.
d25 1
a25 2
        status = gs_home(homedir);
        char **homedir;
d27 2
d45 5
a49 1
int     gs_home(homedir)
d52 8
a59 7
    int           status = GS_SUCCESS;
    int           tt     = 0;
    char          *cp    = (char *)0;
    char          text[256];
    GSGBL_t       tmpgbl;
    GSGBL_t       *pcm;
    struct stat   statbuf;
d62 1
a62 1
    pcm = &tmpgbl;
d64 1
a64 1
    getcwd(text,sizeof text);
a65 2
	sprintf(pcm->config_file,"%s/gstab",text);
    pcm->debug = (getenv("GSDEBUG") != NULL) ? TRUE : FALSE;
d68 1
a68 1
  * anywhere then set it to /tmp.
d70 2
a71 2
    if ((cp = (char *) getenv("GSHOME")) != (char *) 0) {
	strcpy(pcm->homedir, cp);
d74 5
a78 1
	strcpy(pcm->homedir, GSDEFAULTHOME);
d81 5
a85 7
 /* Check if whatever we got exists... */
    if (stat(pcm->homedir, &statbuf)) {
	if (pcm->debug)
		fprintf(stderr,"Can't locate path: %s\n", pcm->homedir);
	strcpy(pcm->homedir, "/tmp");
	if (pcm->debug)
		fprintf(stderr,"Using %s as CM home directory.", pcm->homedir);
d88 6
a93 6
 /* Check for permission to work in here... */
    if (gs_faccess(pcm->homedir, (char *) "rw", (char *) 0)) {
	if (pcm->debug)
		fprintf(stderr,"Directory %s is not r/w accessible. Using /tmp",
	    pcm->homedir);
	strcpy(pcm->homedir, "/tmp");
d96 4
a99 8
    if (stat(pcm->config_file, &statbuf)) {
	sprintf(text, "%s/%s", pcm->homedir, pcm->config_file);
	strcpy(pcm->config_file, text);
	if (stat(pcm->config_file, &statbuf)) {
	    if (pcm->debug)
		fprintf(stderr,"Error!!! Cannot find configuration file: %s\n",
		pcm->config_file);
	}
a100 2
    if (cfgfile != NULL)
	strcpy(cfgfile, pcm->config_file);
d102 4
a105 7
    if (homedir != NULL)
	strcpy(homedir, pcm->homedir);

    if (debugflag != (int *)0)
	*debugflag = pcm->debug;

    return (GS_SUCCESS);
@
