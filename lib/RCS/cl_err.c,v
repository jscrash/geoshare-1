head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	91.04.19.17.58.22;	author julian;	state Exp;
branches;
next	1.0;

1.0
date	91.04.19.14.42.52;	author julian;	state Exp;
branches;
next	;


desc
@Initial checkin of cl_err.c.
@


1.1
log
@*** empty log message ***
@
text
@/*
 *
 * Error handling routines
 * W Richard Stevens, 1990, Unix Network Programming
 * Prentice Hall, Englewood Cliffs, N. J. 07632
 * 
 * Appendix A.3
 *
 */

#include <stdio.h>
#include <varargs.h>
#include "systype.h"

#ifdef CLIENT
#ifdef SERVER
cant define both CLIENT and SERVER
#endif
#endif

#ifndef CLIENT
#ifndef SERVER
#define CLIENT 1
#endif
#endif

#ifndef NULL
#define NULL ((void *)0)
#endif

char *pname = NULL;

#ifdef CLIENT

/*
 * Fatal error.  Print a message and terminate.
 * Don't dump core and don't print the system's errno value.
 *
 *      err_quit(str, arg1, arg2, ...)
 *
 * The string "str" must specify the conversion specification for any args
 */

/*VARARGS1*/
err_quit (va_alist)
va_dcl
    {
    va_list args;
    char *fmt;
    
    va_start (args);
    if (pname != NULL)
        {
        fprintf (stderr, "%s: ", pname);
        }
    fmt = va_arg (args, char *);
    vfprintf (stderr, fmt, args);
    fputc ('\n', stderr);
    va_end (args);
    
    exit (1);
    }

/*
 * Fatal error related to a system call.  Print a message and terminate.
 * Don't dump core, but do print the system's errno value and its
 * associated message.
 *
 *      err_sys(str, arg1, arg2, ...)
 *
 * The string "str" must specify the conversion specification for any args
 */

/*VARARGS1*/
err_sys (va_alist)
va_dcl
    {
    va_list args;
    char *fmt;
    
    va_start (args);
    if (pname != NULL)
        {
        fprintf (stderr, "%s: ", pname);
        }
    fmt = va_arg (args, char *);
    vfprintf (stderr, fmt, args);
    va_end (args);
    
    my_perror ();
    
    exit (1);
    }

/*
 * Recoverable error.  Print a message and return to caller.
 *
 *      err_ret(str, arg1, arg2, ...)
 *
 * The string "str" must specify the conversion specification for any args
 */

/*VARARGS1*/
err_ret (va_alist)
va_dcl
    {
    va_list args;
    char *fmt;
    
    va_start (args);
    if (pname != NULL)
        {
        fprintf (stderr, "%s: ", pname);
        }
    fmt = va_arg (args, char *);
    vfprintf (stderr, fmt, args);
    va_end (args);
    
    my_perror ();
    
    fflush (stdout);
    fflush (stderr);
    
    return;
    
    }

/*
 * Fatal error.  Print a message, dump core, (for debugging) and terminate.
 *
 *      err_dump(str, arg1, arg2, ...)
 *
 * The string "str" must specify the conversion specification for any args
 */

/*VARARGS1*/
err_dump (va_alist)
va_dcl
    {
    va_list args;
    char *fmt;
    
    va_start (args);
    if (pname != NULL)
        {
        fprintf (stderr, "%s: ", pname);
        }
    fmt = va_arg (args, char *);
    vfprintf (stderr, fmt, args);
    va_end (args);
    
    my_perror ();
    
    fflush (stdout);
    fflush (stderr);
    
    abort ();
    exit (1);
    
    }

/*
 * Print the UNIX errno value
 */

my_perror ()
    {
    char *sys_err_str ();
    
    fprintf (stderr, " %s\n", sys_err_str ());
    }


#endif                              /* CLIENT */
@


1.0
log
@Initial
@
text
@@
