head	1.8;
access;
symbols;
locks
	julian:1.8; strict;
comment	@ * @;


1.8
date	91.05.03.21.39.53;	author julian;	state Exp;
branches;
next	1.7;

1.7
date	91.04.30.04.10.58;	author julian;	state Exp;
branches;
next	1.6;

1.6
date	91.04.29.21.58.59;	author julian;	state Exp;
branches;
next	1.5;

1.5
date	91.04.24.22.36.14;	author julian;	state Exp;
branches;
next	1.4;

1.4
date	91.04.24.18.15.19;	author julian;	state Exp;
branches;
next	1.3;

1.3
date	91.04.24.13.39.51;	author julian;	state Exp;
branches;
next	1.2;

1.2
date	91.04.24.11.13.27;	author julian;	state Exp;
branches;
next	1.1;

1.1
date	91.04.24.10.39.24;	author julian;	state Exp;
branches;
next	1.0;

1.0
date	91.04.24.09.37.05;	author julian;	state Exp;
branches;
next	;


desc
@Initial checkin of gs_cr_slot.c.
@


1.8
log
@Reformat to indentation 8 for readability
@
text
@#include "gs.h"
#include <fcntl.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

/****************************************************************************
    GeoShare Subroutine Library -  Shared Memory Tools.

Module: GS_CR_SLOT

Description:
	Create a communications slot.  A slot is composed of two semaphores
	and a buffer.  This routine allocates a region of shared memory
	large enough to hold a slot.  Two semaphores are created in the slot.

	A key is given in the parameter list that is used to identify the
	shared memory segment, and semaphores created.

Usage:
	GSKey_t *key;
	GSSlot_t slot;

	status = gs_create_slot.c(key,&slot);

	
Parameters:
	INPUT:
		GSKey_t *key		- Memory identifier key pointer.

	OUTPUT:
		char **pslot		- Pointer to slot allocated.

Status:

	This routine returns GS_SUCCESS or GS_FAIL;

Author:
	Julian Carlisle 	 Wed Apr 24 03:38:02 PDT 1991
*****************************************************************************/

int     gs_create_slot(key, pslot)
GSKey_t *key;
GSSlot_t **pslot;
{
	int     status = GS_SUCCESS;
	int     id = 0;

	if (key == (GSKey_t *) 0) {
		gs_log("gs_create_slot: Null key.");
		return (GS_FAIL);
	}

 /* Create shared memory segment, return its id.	 */
	id = shmget(key->key, sizeof(GSSlot_t), 0666 | IPC_CREAT);
	if (id < 0) {
		gs_log("gs_create_slot:Cannot alloc shared memory for slot.");
		return (GS_FAIL);
	}

 /* Attach the shared memory, let the system 	 */
 /* choose the address at which the memory is 	 */
 /* attached.  This is more portable.		 */
	*pslot = (GSSlot_t *) shmat(id, (char *) 0, 0);
	if (*pslot == (GSSlot_t *) -1) {
		gs_log("gs_create_slot:Cannot attach shared memory.");
		return (GS_FAIL);
	}

	gs_log("gs_create_slot:Slot address is %d\n", (int) *pslot);

 /* Create the slot lock semaphore. 	 */
	(*pslot)->locksem = gs_sem_create(key->key, 1);
	if ((*pslot)->locksem < 0) {
	/* remove the shared memory segment  	 */
		if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0) {
			gs_log("gs_create_slot:Cannot remove shared mem.");
		}
		gs_log("gs_create_slot:Cannot create lock semaphore");
		return (GS_FAIL);
	}

 /* Create the slot message semaphore. 	 */
	(*pslot)->msgsem = gs_sem_create(key->key + 4, 1);
	if ((*pslot)->msgsem < 0) {

	/* remove the semaphore created above. 	 */
		gs_sem_close((*pslot)->locksem);

	/* remove the shared memory segment	 */
		if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0) {
			gs_log("gs_create_slot:Cannot remove shared mem.");
		}

		gs_log("gs_create_slot:Cannot create msg semaphore");
		return (GS_FAIL);
	}

 /* Create the slot message semaphore. 	 */
	(*pslot)->cmsem = gs_sem_create(key->key + 8, 0);
	if ((*pslot)->cmsem < 0) {

	/* remove the semaphore created above. 	 */
		gs_sem_close((*pslot)->locksem);
		gs_sem_close((*pslot)->msgsem);

	/* remove the shared memory segment	 */
		if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0) {
			gs_log("gs_create_slot:Cannot remove shared mem.");
		}

		gs_log("gs_create_slot:Cannot create cm semaphore");
		return (GS_FAIL);
	}
	(*pslot)->id = id;

	return (GS_SUCCESS);
}
@


1.7
log
@*** empty log message ***
@
text
@d46 2
a47 2
    int     status = GS_SUCCESS;
    int     id = 0;
d49 4
a52 4
    if (key == (GSKey_t *) 0) {
	gs_log("gs_create_slot: Null key.");
	return (GS_FAIL);
    }
d55 5
a59 5
    id = shmget(key->key, sizeof(GSSlot_t), 0666 | IPC_CREAT);
    if (id < 0) {
	gs_log("gs_create_slot:Cannot alloc shared memory for slot.");
	return (GS_FAIL);
    }
d64 5
a68 5
    *pslot = (GSSlot_t *) shmat(id, (char *) 0, 0);
    if (*pslot == (GSSlot_t *) -1) {
	gs_log("gs_create_slot:Cannot attach shared memory.");
	return (GS_FAIL);
    }
d70 1
a70 1
    gs_log("gs_create_slot:Slot address is %d\n", (int) *pslot);
d73 8
a80 5
    (*pslot)->locksem = gs_sem_create(key->key, 1);
    if ((*pslot)->locksem < 0) {
    /* remove the shared memory segment  	 */
	if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0) {
	    gs_log("gs_create_slot:Cannot remove shared mem.");
a81 3
	gs_log("gs_create_slot:Cannot create lock semaphore");
	return (GS_FAIL);
    }
d84 2
a85 2
    (*pslot)->msgsem = gs_sem_create(key->key + 4, 1);
    if ((*pslot)->msgsem < 0) {
d87 2
a88 2
    /* remove the semaphore created above. 	 */
	gs_sem_close((*pslot)->locksem);
d90 7
a96 3
    /* remove the shared memory segment	 */
	if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0) {
	    gs_log("gs_create_slot:Cannot remove shared mem.");
a98 4
	gs_log("gs_create_slot:Cannot create msg semaphore");
	return (GS_FAIL);
    }

d100 2
a101 2
    (*pslot)->cmsem = gs_sem_create(key->key + 8, 0);
    if ((*pslot)->cmsem < 0) {
d103 3
a105 3
    /* remove the semaphore created above. 	 */
	gs_sem_close((*pslot)->locksem);
	gs_sem_close((*pslot)->msgsem);
d107 7
a113 3
    /* remove the shared memory segment	 */
	if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0) {
	    gs_log("gs_create_slot:Cannot remove shared mem.");
d115 1
d117 1
a117 6
	gs_log("gs_create_slot:Cannot create cm semaphore");
	return (GS_FAIL);
    }
    (*pslot)->id = id;

    return (GS_SUCCESS);
@


1.6
log
@.
@
text
@d84 1
a84 1
    (*pslot)->msgsem = gs_sem_create(key->key + 4, 0);
@


1.5
log
@*** empty log message ***
@
text
@d18 1
a18 1
	shared memory segment, and semaphores created.  
d42 1
a42 1
int gs_create_slot(key,pslot)
d46 2
a47 2
int status = GS_SUCCESS;
int id = 0;
d49 4
a52 4
	if (key == (GSKey_t *)0) {
		gs_log("gs_create_slot: Null key.");
		return (GS_FAIL);
	}
d54 6
a59 6
			/* Create shared memory segment, return its id.	*/
	id = shmget(key->key,sizeof(GSSlot_t),0666|IPC_CREAT);
	if (id < 0) {
		gs_log("gs_create_slot:Cannot alloc shared memory for slot.");
		return (GS_FAIL);
	}
d61 8
a68 8
			/* Attach the shared memory, let the system 	*/
			/* choose the address at which the memory is 	*/
			/* attached.  This is more portable.		*/
	*pslot = (GSSlot_t *) shmat(id, (char *)0,0);
	if (*pslot == (GSSlot_t *) - 1) {
		gs_log("gs_create_slot:Cannot attach shared memory.");
		return (GS_FAIL);
	}
d70 1
a70 1
	gs_log("gs_create_slot:Slot address is %d\n", (int) *pslot);
d72 6
a77 9
			/* Create the slot lock semaphore. 	*/
	(*pslot)->locksem = gs_sem_create(key->key, 1);
	if ((*pslot)->locksem < 0) {
			/* remove the shared memory segment  	*/
		if (shmctl(id,IPC_RMID,(struct shmid_ds *)0) < 0) {
			gs_log("gs_create_slot:Cannot remove shared mem.");
		}
		gs_log("gs_create_slot:Cannot create lock semaphore");
		return (GS_FAIL);
d79 3
d83 3
a85 3
			/* Create the slot message semaphore. 	*/
	(*pslot)->msgsem = gs_sem_create(key->key + 4, 0);
	if ((*pslot)->msgsem < 0) {
d87 2
a88 2
			/* remove the semaphore created above. 	*/
		gs_sem_close((*pslot)->locksem);
d90 3
a92 7
			/* remove the shared memory segment	*/
		if (shmctl(id,IPC_RMID,(struct shmid_ds *)0) < 0) {
			gs_log("gs_create_slot:Cannot remove shared mem.");
		}

		gs_log("gs_create_slot:Cannot create msg semaphore");
		return (GS_FAIL);
d95 3
a97 3
			/* Create the slot message semaphore. 	*/
	(*pslot)->cmsem = gs_sem_create(key->key + 8, 0);
	if ((*pslot)->cmsem < 0) {
d99 3
a101 3
			/* remove the semaphore created above. 	*/
		gs_sem_close((*pslot)->locksem);
		gs_sem_close((*pslot)->msgsem);
d103 3
a105 4
			/* remove the shared memory segment	*/
		if (shmctl(id,IPC_RMID,(struct shmid_ds *)0) < 0) {
			gs_log("gs_create_slot:Cannot remove shared mem.");
		}
d107 3
a109 2
		gs_log("gs_create_slot:Cannot create cm semaphore");
		return (GS_FAIL);
a110 1
	(*pslot)->id = id;
d112 6
a117 1
	return (GS_SUCCESS);
@


1.4
log
@*** empty log message ***
@
text
@d84 1
a84 1
	(*pslot)->msgsem = gs_sem_create(key->key + 1, 0);
a98 1
#if 0
d100 1
a100 1
	(*pslot)->cmsem = gs_sem_create(key->key + 2, 0);
a114 1
#endif
@


1.3
log
@*** empty log message ***
@
text
@d73 1
a73 1
	(*pslot)->locksem = gs_sem_create(key->key, 0);
@


1.2
log
@*** empty log message ***
@
text
@d88 1
a88 1
		sem_close((*pslot)->locksem);
d99 18
@


1.1
log
@*** empty log message ***
@
text
@d15 1
a15 2
	large enough to hold a slot that has a buffer the size of the
	bufsize function parameter.  Two semaphores are created in the slot.
d21 1
a21 2
    	int bufsize;
	GSKey_t key;
d24 1
a24 1
	status = gs_create_slot.c(bufsize, key,&slot);
d29 1
a29 2
		int  bufsize		- Minimum buffer size in bytes
		GSKey_t key		- Memory identifier key.
d36 1
a36 2
	This routine returns a null pointer if an error occurrs while trying
	to create/attach the memory or semaphores.
d42 1
a42 2
int gs_create_slot(bufsize,key,pslot)
int bufsize;
@


1.0
log
@Initial
@
text
@d22 3
a24 1
	slotptr = (GSSlot_t *) gs_create_slot.c(bufsize, key);
d26 2
d35 1
a35 1
		char *ptr		- Pointer to region allocated.
d46 1
a46 1
int gs_create_slot(bufsize,key)
d48 2
a49 1
GSKey_t key;
d52 1
d54 4
a57 2
return (status);
}
d59 6
d66 42
@
