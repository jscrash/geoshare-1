head	1.5;
access;
symbols;
locks
	julian:1.5; strict;
comment	@ * @;


1.5
date	91.05.20.19.50.41;	author julian;	state Exp;
branches;
next	1.4;

1.4
date	91.05.14.15.09.02;	author julian;	state Exp;
branches;
next	1.3;

1.3
date	91.05.11.23.08.32;	author julian;	state Exp;
branches;
next	1.2;

1.2
date	91.05.03.21.39.53;	author julian;	state Exp;
branches;
next	1.1;

1.1
date	91.04.29.21.58.59;	author julian;	state Exp;
branches;
next	1.0;

1.0
date	91.04.29.08.46.23;	author julian;	state Exp;
branches;
next	;


desc
@Initial checkin of gs_logfile.c.
@


1.5
log
@Update
@
text
@#include "gs.h"
#include <sys/stat.h>

/****************************************************************************
Module: GS_LOGFILE

Description:
	Determine the path of the message logging file for this instance
	of GeoShare.  

	An internally allocated pointer to the log file path is returned. 
	If the logfile argument is not null, the file path is copied into
	the buffer pointed to by logfile.

Usage:
	char *file;
	file = gs_logfile(NULL);
	
Parameters:
	INPUT:
		char *logfile		- optional pointer to user buffer for filename

	OUTPUT:
		NONE


Status:
	A null pointer is returned if the log file path could not be determined
	(i.e. GSHOME not initialized, etc)

Author:
	Julian Carlisle 	 Mon Apr 22 19:54:42 PDT 1991
*****************************************************************************/

extern int getpid();

char   *gs_logfile(logfile)
char  *logfile;
{
	int     len = 0;
	char   *cp;
	static char gserrfile[512];
	struct stat statbuf;


	cp = gs_home(NULL);
	if (cp == NULL) {
		return ((char *) 0);
	}
	(void)sprintf(gserrfile, "%s/%s", cp,GSLOGFILENAME);
	if (!stat(gserrfile, &statbuf)) {
		if (gs_faccess(gserrfile, "w", (char *) 0) != GS_SUCCESS) {
			(void)sprintf(gserrfile, "%s/%d_%s", cp, getpid(),GSLOGFILENAME);
		}
	}
	if (logfile != (char *) 0) {
		len = strlen(gserrfile);
		(void)strcpy(logfile, gserrfile);
	}
	return ((char *) gserrfile);
}
@


1.4
log
@Update
@
text
@d50 1
a50 1
	(void)sprintf(gserrfile, "%s/gscm_errors.log", cp);
d53 1
a53 1
			(void)sprintf(gserrfile, "%s/gscm_errors_%d.log", cp, getpid());
@


1.3
log
@*** empty log message ***
@
text
@d4 31
@


1.2
log
@Reformat to indentation 8 for readability
@
text
@d4 2
d7 1
a7 1
char  **logfile;
a8 1
	int     status = GS_SUCCESS;
d19 1
a19 1
	sprintf(gserrfile, "%s/gscm_errors.log", cp);
d22 1
a22 1
			sprintf(gserrfile, "%s/gscm_errors_%d.log", cp, getpid());
d25 1
a25 1
	if (logfile != (char **) 0) {
d27 1
a27 2
		*logfile = (char *) malloc(sizeof(char) * len + 1);
		strcpy(*logfile, gserrfile);
@


1.1
log
@.
@
text
@d7 5
a11 5
    int     status = GS_SUCCESS;
    int     len = 0;
    char   *cp;
    static char gserrfile[512];
    struct stat statbuf;
d14 3
a16 8
    cp = gs_home(NULL);
    if (cp == NULL) {
	return ((char *) 0);
    }
    sprintf(gserrfile, "%s/gscm_errors.log", cp);
    if (!stat(gserrfile, &statbuf)) {
	if (gs_faccess(gserrfile, "w", (char *) 0) != GS_SUCCESS) {
	    sprintf(gserrfile, "%s/gscm_errors_%d.log", cp, getpid());
d18 12
a29 7
    }
    if (logfile != (char **) 0) {
	len = strlen(gserrfile);
	*logfile = (char *) malloc(sizeof(char) * len + 1);
	strcpy(*logfile, gserrfile);
    }
    return ((char *) gserrfile);
@


1.0
log
@Initial
@
text
@d8 1
a8 1
    int    len = 0;
@
