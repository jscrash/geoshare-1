head	1.26;
access;
symbols;
locks
	julian:1.26; strict;
comment	@ * @;


1.26
date	2012.10.17.20.35.48;	author julian;	state Exp;
branches;
next	1.25;

1.25
date	91.05.20.19.13.37;	author julian;	state Exp;
branches;
next	1.24;

1.24
date	91.05.20.03.30.23;	author julian;	state Exp;
branches;
next	1.23;

1.23
date	91.05.15.01.25.38;	author julian;	state Exp;
branches;
next	1.22;

1.22
date	91.05.14.15.29.18;	author julian;	state Exp;
branches;
next	1.21;

1.21
date	91.05.14.08.06.58;	author julian;	state Exp;
branches;
next	1.20;

1.20
date	91.05.12.10.51.32;	author julian;	state Exp;
branches;
next	1.19;

1.19
date	91.05.12.01.43.21;	author julian;	state Exp;
branches;
next	1.18;

1.18
date	91.05.09.07.57.01;	author julian;	state Exp;
branches;
next	1.17;

1.17
date	91.05.07.07.18.33;	author julian;	state Exp;
branches;
next	1.16;

1.16
date	91.05.07.06.22.36;	author julian;	state Exp;
branches;
next	1.15;

1.15
date	91.05.07.04.59.56;	author julian;	state Exp;
branches;
next	1.14;

1.14
date	91.05.06.04.35.13;	author julian;	state Exp;
branches;
next	1.13;

1.13
date	91.05.03.21.39.53;	author julian;	state Exp;
branches;
next	1.12;

1.12
date	91.05.03.10.57.23;	author julian;	state Exp;
branches;
next	1.11;

1.11
date	91.04.30.14.56.30;	author julian;	state Exp;
branches;
next	1.10;

1.10
date	91.04.30.14.25.18;	author julian;	state Exp;
branches;
next	1.9;

1.9
date	91.04.30.12.14.10;	author julian;	state Exp;
branches;
next	1.8;

1.8
date	91.04.30.12.11.55;	author julian;	state Exp;
branches;
next	1.7;

1.7
date	91.04.30.09.47.50;	author julian;	state Exp;
branches;
next	1.6;

1.6
date	91.04.29.21.58.59;	author julian;	state Exp;
branches;
next	1.5;

1.5
date	91.04.20.05.25.06;	author julian;	state Exp;
branches;
next	1.4;

1.4
date	91.04.19.19.49.34;	author julian;	state Exp;
branches;
next	1.3;

1.3
date	91.04.19.18.45.56;	author julian;	state Exp;
branches;
next	1.2;

1.2
date	91.04.19.18.34.28;	author julian;	state Exp;
branches;
next	1.1;

1.1
date	91.04.19.18.32.42;	author julian;	state Exp;
branches;
next	1.0;

1.0
date	91.04.19.18.32.08;	author julian;	state Exp;
branches;
next	;


desc
@Initial checkin of gs_subs.c.
@


1.26
log
@*** empty log message ***
@
text
@#include "gs.h"
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <string.h>
#include <ctype.h>

/* extern int semop(), semctl(),semget(); */

/*
*  GeoShare API internal routines.
*
* Miscellaneous support routines for the GeoShare Application Programmers
* Interface Library.  These routines are only used internally.
*
* Julian	 Tue Apr 30 02:33:43 PDT 1991
*/

/*
**  Convert an ASCII string of octal digits into an integer
*/
int gsz_octal(str)
char   *str;
{
	register c, num;

	num = 0;
	while ((c = *str++) >= '0' && c <= '7')
		num = (num << 3) + (c - '0');
	return (num);
}

int     gs_semrm(sid)
int     sid;
{
	return (semctl(sid, 0, IPC_RMID, 0));
}

int     gs_semtran(key)
int     key;
{
	int     sid;
	if ((sid = semget((key_t) key, 1, 0666 | IPC_CREAT)) == -1)
		gs_log("gs_semtran: cannot get semaphore");
	return (sid);
}

void    gs_semcall(sid, op)
int     sid;
int     op;
{
	struct sembuf sb;
	int     status;
	sb.sem_num = 0;
	sb.sem_op = op;
	sb.sem_flg = SEM_UNDO;
	errno = 0;
	if (semop(sid, &sb, 1) == -1) {
		status = errno;
		gs_log("gs_semcall: Error from semop.");
		errno = status;
	}
}


void    gs_semP(sid)
int     sid;
{
	gs_semcall(sid, -1);
}

void    gs_semV(sid)
int     sid;
{
	gs_semcall(sid, 1);
}

int     send_data()
{
	return (-1);
}

void    gs_print_args(argc, argv)
int     argc;
char  **argv;
{
	register int i;

	for (i = 0; i < argc; i++)
		fprintf(stderr,"arg%d: %s\n", i, argv[i]);
	fflush(stderr);
}

GSString_t *gs_mk_string(string, pstring_t)
char   *string;
GSString_t *pstring_t;
{
	GSString_t *cp;

	if (pstring_t != (GSString_t *) 0)
		cp = pstring_t;
	else
		cp = (GSString_t *) malloc(sizeof(GSString_t) + 1);

	if (!cp)
		return ((GSString_t *) 0);

	cp->vector_pointer = strdup(string);
	cp->number_elements = strlen(string);
	cp->element_size = sizeof(char);
	cp->element_format = GSV_STRING;
	cp->extension = 0;


	return (cp);
}

GSVector_t *gs_mk_vector(data, dsize, vtype, len, pvec)
char   *data;
unsigned int dsize;
GSVectorType_t vtype;
unsigned int len;
GSVector_t *pvec;
{
	GSVector_t *vp;

	if (pvec != (GSVector_t *) 0)
		vp = pvec;
	else
		vp = (GSVector_t *) malloc(sizeof(GSVector_t) + 1);

	if (!vp)
		return ((GSVector_t *) 0);

	vp->vector_pointer = (GSVoidptr_t) malloc(dsize * len + 1);
	memcpy(vp->vector_pointer, data, len);
	vp->number_elements = len;
	vp->element_size = dsize;
	vp->element_format = vtype;
	vp->extension = 0;

	return (vp);
}



 /*
  * Duplicate a string. Allocate a new pointer.
  */
char   *gs_strdup(cp)
char   *cp;
{
	char   *new;

	if (cp == NULL)
		cp = "";

	new = (char *) malloc((unsigned) (strlen(cp) + 1));
	if (new == (char *) 0) {
		gs_log("Out of memory.");
		return (NULL);
	}
	strcpy(new, cp);
	return (new);
}



/*
 * Since GeoShare must be buildable outside of the Finder SDF environment,
 * this module contains some routines from the Finder Source Library.
 * They have been slightly modified such that they do not require any
 * Finder Header files.
 *
 * This duplication has been done for expediancy, and to avoid re-crafting
 * wheels.
 *
 * JSC 4/30/91
 */


 /*
  * This is a local copy of the standard Finder subroutine ts_tcp_append()
  */
char  **gs_tcp_append(ptcp, cp)
char ***ptcp;
char   *cp;
{
	int     i;
	int     len = 0;
	char  **tmp_tcp;

 /* Search for the null pointer  */

	i = 0;
	if (*ptcp == (char **) NULL || **ptcp == (char *) NULL) {
		tmp_tcp = *ptcp = (char **) malloc((size_t) (sizeof(char *) * 2));
	}
	else {
		tmp_tcp = *ptcp;
		len = gs_tcp_len(tmp_tcp);
		for (i = 0; i < len; i++) {
			if (tmp_tcp[i] == (char *) 0) {
				tmp_tcp[i] = (char *) malloc((size_t) (strlen((char *) cp) + 1));
				strcpy((char *) tmp_tcp[i++], (char *) cp);
				tmp_tcp[i] = (char *) 0;
				return *ptcp;
			}
		}
		*ptcp = tmp_tcp = (char **) realloc((unsigned char *) tmp_tcp,
			(size_t) ((i + 2) * sizeof(char *)));
	}
	tmp_tcp[i] = (char *) malloc((size_t) (strlen((char *) cp) + 1));
	strcpy((char *) tmp_tcp[i++], (char *) cp);
	tmp_tcp[i] = (char *) 0;

	return *ptcp;
}






int     gs_tcp_len(tcp)
char  **tcp;
{
	register int idx = 0;


	if (tcp != (char **) 0)
		while (*tcp++ != NULL)
			idx++;

	return (idx);
}


/****************************************************************************
    GeoShare Subroutine Library -  Shared Memory Tools.

Module: GS_DELETE_SLOT

Description:
	Delete a communications slot.  This routine detaches and deletes the
	shared memory associated with a slot after closing its semaphores.


Usage:
	GSSlot_t *pslot;

	status = gs_delete_slot(pslot);

	
Parameters:
	INPUT:
		GSSlot_t *pslot		- Address of slot to delete.

	OUTPUT:
		None.

Status:
	This routine will return GS_SUCCESS or GS_FAIL.

Author:
	Julian Carlisle 	 Fri May  3 16:12:22 PDT 1991
*****************************************************************************/

int     gsz_delete_slot(pslot)
GSSlot_t *pslot;
{
	int     status = GS_SUCCESS;
	int     id = 0;

	errno = 0;
	if (pslot == (GSSlot_t *) 0) {
		gs_log("gs_delete_slot: Null slot pointer.");
		return (GS_FAIL);
	}
	gs_semrm(pslot->locksem);
	gs_semrm(pslot->msgsem);
	gs_semrm(pslot->cmsem);

	id = pslot->id;


	if (gs_shm_free((char *)pslot) < 0) {
		gs_log("gs_delete_slot:Cannot detach shared memory %d", pslot);
		status = GS_FAIL;
	}
	else {
		if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0)
			gs_log("gs_delete_slot: Error deleting slot memory");
		else
			status = SUCCESS;
	}
	return (status);
}


int     gsz_detach_slot(pslot)
GSSlot_t *pslot;
{

	errno = 0;
	if (pslot == (GSSlot_t *) 0) {
		gs_log("gs_detach_slot: Null slot pointer.");
		return (GS_FAIL);
	}

	gs_semrm(pslot->locksem);
	gs_semrm(pslot->msgsem);
	gs_semrm(pslot->cmsem);

	if (gs_shm_free((char *)pslot) < 0) {
		gs_log("gs_detach_slot:Cannot detach shared memory %d", pslot);
		return (GS_FAIL);
	}

	return (GS_SUCCESS);
}

 /*
  * Here is the AT&T public domain source for getopt(3). 
  * It is the code which was given out at the 1985 UNIFORUM conference
  * in Dallas.  I obtained it by electronic mail directly from AT&T.
  * The people there assure me that it is indeed in the public domain.
  */

/*LINTLIBRARY*/
#define NULL	0
#define EOF	(-1)
#define ERR(s, c)	if(opterr){\
	char errbuf[2];\
	errbuf[0] = c; errbuf[1] = '\n';\
	(void) write(2, argv[0], (unsigned)strlen(argv[0]));\
	(void) write(2, s, (unsigned)strlen(s));\
	(void) write(2, errbuf, 2);}

extern int strcmp();
extern char *strchr();

int     opterr = 1;
int     optind = 1;
int     optopt;
char   *optarg;

int     getopt(argc, argv, opts)
int     argc;
char  **argv, *opts;
{
    static int sp = 1;
    register int c;
    register char *cp;

    if (sp == 1)
	if (optind >= argc ||
	    argv[optind][0] != '-' || argv[optind][1] == '\0')
	    return (EOF);
	else if (strcmp(argv[optind], "--") == NULL) {
	    optind++;
	    return (EOF);
	}
    optopt = c = argv[optind][sp];
    if (c == ':' || (cp = strchr(opts, c)) == NULL) {
	ERR(": illegal option -- ", c);
	if (argv[optind][++sp] == '\0') {
	    optind++;
	    sp = 1;
	}
	return ('?');
    }
    if (*++cp == ':') {
	if (argv[optind][sp + 1] != '\0')
	    optarg = &argv[optind++][sp + 1];
	else if (++optind >= argc) {
	    ERR(": option requires an argument -- ", c);
	    sp = 1;
	    return ('?');
	}
	else
	    optarg = argv[optind++];
	sp = 1;
    }
    else {
	if (argv[optind][++sp] == '\0') {
	    sp = 1;
	    optind++;
	}
	optarg = NULL;
    }
    return (c);
}
@


1.25
log
@Update
@
text
@d8 1
a8 1
extern int semop(), semctl(),semget();
a333 1
	extern int strlen(), write();\
@


1.24
log
@Update
@
text
@d5 2
@


1.23
log
@Update
@
text
@a277 1

@


1.22
log
@Update
@
text
@d286 1
a286 1
	if (gs_shm_free(pslot) < 0) {
d314 1
a314 1
	if (gs_shm_free(pslot) < 0) {
@


1.21
log
@Update
@
text
@d321 73
@


1.20
log
@Update
@
text
@d88 2
a89 1
		printf("arg%d: %s\n", i, argv[i]);
@


1.19
log
@Update
@
text
@d285 1
a285 1
	if (gs_free(pslot) < 0) {
d313 1
a313 1
	if (gs_free(pslot) < 0) {
@


1.18
log
@Update
@
text
@d6 1
d17 14
d34 1
a34 1
	(void) semctl(sid, 0, IPC_RMID, 0);
a301 2
	int     status = GS_SUCCESS;
	int     id = 0;
@


1.17
log
@Update
@
text
@d16 2
a17 2
int gs_semrm(sid)
int sid;
d19 1
a19 1
(void)semctl(sid,0,IPC_RMID,0);
d22 2
a23 2
int  gs_semtran (key)
int key;
d25 4
a28 4
int sid;
if ((sid = semget((key_t)key,1,0666|IPC_CREAT)) == -1)
	gs_log("gs_semtran: cannot get semaphore");
return (sid);
d31 3
a33 3
void gs_semcall(sid,op)
int sid;
int op;
d35 2
a36 2
struct sembuf sb;
int status;
d41 1
a41 1
	if (semop(sid,&sb,1) == -1) {
d44 1
a44 1
		errno=status;
d49 2
a50 2
void gs_semP(sid)
int sid;
d52 1
a52 1
gs_semcall(sid,-1);
d55 2
a56 2
void gs_semV(sid)
int sid;
d58 1
a58 1
gs_semcall(sid,1);
d66 3
a68 3
void gs_print_args(argc,argv)
int argc;
char **argv;
d70 1
a70 1
register int i ;
d72 2
a73 2
for (i = 0; i < argc; i++)
	printf("arg%d: %s\n",i,argv[i]);
d272 1
a272 1
		status =  GS_FAIL;
d279 1
a279 1
	}	
a306 3



@


1.16
log
@Update
@
text
@d36 1
d39 4
a42 3
	sb.sem_flg = 0;

	if (semop(sid,&sb,1) == -1)
d44 2
a45 1

@


1.15
log
@*** empty log message ***
@
text
@d216 91
@


1.14
log
@Update
@
text
@d2 3
a4 2
#include <string.h>
#include <errno.h>
d6 1
d15 42
@


1.13
log
@Reformat to indentation 8 for readability
@
text
@d19 9
@


1.12
log
@*** empty log message ***
@
text
@d16 1
a16 1
return (-1);
d20 2
a21 2
GSString_t *gs_mk_string(string,pstring_t)
char *string;
d24 1
a24 1
GSString_t *cp;
d26 1
a26 1
	if (pstring_t != (GSString_t *)0)
d29 1
a29 1
		cp = (GSString_t *)malloc(sizeof(GSString_t) +1);
d32 1
a32 1
		return ((GSString_t *)0);
d41 1
a41 1
return (cp);
d44 2
a45 2
GSVector_t *gs_mk_vector(data,dsize,vtype,len,pvec)
char *data;
d51 1
a51 1
GSVector_t *vp;
d53 1
a53 1
	if (pvec != (GSVector_t *)0)
d56 1
a56 1
		vp = (GSVector_t *)malloc(sizeof(GSVector_t) +1);
d59 1
a59 1
		return ((GSVector_t *)0);
d61 2
a62 2
	vp->vector_pointer = (GSVoidptr_t)malloc(dsize * len +1);
	memcpy(vp->vector_pointer,data,len);
d68 1
a68 1
return (vp);
d73 1
a73 1
 /* 
d79 1
a79 1
    char   *new;
d81 2
a82 2
    if (cp == NULL)
	cp = "";
d84 7
a90 7
    new = (char *)malloc((unsigned) (strlen(cp) + 1));
    if (new == (char *) 0) {
	gs_log("Out of memory.");
	return (NULL);
    }
    strcpy(new, cp);
    return (new);
d99 2
a100 2
 * Finder Header files. 
 * 
d103 1
a103 1
 * 
d109 3
a111 3
 * This is a local copy of the standard Finder subroutine ts_tcp_append()
 */
char **gs_tcp_append (ptcp, cp)
d113 1
a113 1
char *cp;
d115 30
a144 34
    int i;
    int len = 0;
    char ** tmp_tcp;
    
    /*  Search for the null pointer  */
    
    i = 0;
    if (*ptcp == (char **)NULL || ** ptcp == (char *)NULL)
        {
        tmp_tcp = *ptcp = (char **)malloc ((size_t)(sizeof(char *) * 2));
        }
    else
        {
        tmp_tcp = *ptcp;
        len = gs_tcp_len (tmp_tcp);
        for (i = 0; i < len; i++)
            {
            if (tmp_tcp[i] == (char *)0)
                {
                tmp_tcp[i] = (char *)malloc ((size_t)(strlen ((char *)cp) + 1));
                strcpy ((char *)tmp_tcp[i++], (char *)cp);
                tmp_tcp[i] = (char *)0;
                return *ptcp;
                }
            }
        *ptcp = tmp_tcp = (char **)realloc ((unsigned char *)tmp_tcp,
                                            (size_t)((i + 2) * sizeof(char *)));
        }
    tmp_tcp[i] = (char *)malloc ((size_t)(strlen ((char *)cp) + 1));
    strcpy ((char *)tmp_tcp[i++], (char *)cp);
    tmp_tcp[i] = (char *)0;
    
    return *ptcp;
}
d151 2
a152 2
int gs_tcp_len (tcp)
char **tcp;
d154 1
a154 2
register int idx = 0;    
    
a155 3
    if (tcp != (char **)0)
        while (*tcp++ != NULL)
            idx++;
d157 5
a161 1
return (idx);
a162 1

@


1.11
log
@*** empty log message ***
@
text
@a10 8
* Since GeoShare must be buildable outside of the Finder SDF environment,
* this module contains some routines from the Finder Source Library.
* They have been slightly modified such that they do not require any
* Finder Header files. 
* 
* This duplication has been done for expediancy, and to avoid re-crafting
* wheels.
*
d20 1
a20 1
GSString_t *gs_mk_string(string)
d22 1
d26 5
a30 1
	cp = (GSString_t *)malloc(sizeof(GSString_t) +1);
d40 1
d44 1
a44 1
GSVector_t *gs_mk_vector(data,dsize,vtype,len)
d49 1
d53 5
a57 1
	vp = (GSVector_t *)malloc(sizeof(GSVector_t) +1);
d72 36
a110 1

@


1.10
log
@*** empty log message ***
@
text
@d28 40
@


1.9
log
@*** empty log message ***
@
text
@d2 2
d8 2
a9 2
* Miscellaneous support routines for the GeoShare application programmers
* interface library.  These routines are only used internally.
d11 8
d24 64
@


1.8
log
@*** empty log message ***
@
text
@a15 307
/*
* This routine is extracted from the FINDER source library (ts_next_word)
*
* Description:
*     GS_NEXT_WORD parses a null terminated character string and returns
*     tokens, or words, from the string, to the string indicated by the
*     token argument. The value of the function is a pointer to the next
*     word in the line. Words are delimited by one or more spaces.
*     Quoted strings are considered one word.
*
*     The caller specifies a line to be parsed, and a character string
*     where the next word in the line is to be placed. The function
*     returns the address of the next word in the line. This address
*     should be used in subsequent calls to gs_next_word so that all
*     of the words can be extracted.
*
*
* Return Value/Status:
*     GS_NEXT_WORD returns a null pointer if no word could be found.
*     Naturally, this will always occur after all words have been
*     extracted from the character string.
*
*/

char   *gs_next_word(line, token)
char   *line;
char   *token;
{
    char   *l;		     /* Source line */
    char   *t;		     /* Returned token */
    char    c;		     /* Current token character */
    int     status;	     /* Complete token flag */
    int     quote;	     /* Quoted string being processed flag */


 /* Initialize address of returned token. */

    t = token;

 /*
  * If null string passed, then do nothing.
  */

    if (line == (char *) 0)
	l = (char *) 0;

    else {
    /* Indicate not processing quoted string. */

	quote = FALSE;

    /* Indicate still processing token. */

	status = TRUE;

    /* Initialize address of next word. */

	l = line;

    /* Skip leading spaces. */
	while ((*l != 0) && (*l == ' ') && (*l != '\n'))
	    l++;

    /* Process entire token. */

	while (status) {

	/* Look for token terminators. */

	    switch (c = *l++) {

	    /* \n or null terminates token. */

	    case 0:
	    case '\n':
		l = (char *) NULL;
		status = FALSE;
		break;

	    /* Quote character. */
	    case '\"':

	    /*
	     * If terminating quote, then done with token.
	     */

		if (quote)
		    status = FALSE;

	    /*
	     * If leading quote, indicate processing quoted string.
	     */

		else
		    quote = TRUE;
		break;

	    /* Blank. */

	    case ' ':

	    /*
	     * If within quoted string, then blank is part of token.
	     */

		if (quote)
		    *t++ = c;

	    /*
	     * If not in quoted string, then blank terminates token.
	     */

		else
		    status = FALSE;
		break;

	    /*
	     * Not a token terminator. Copy character into resultant token.
	     */

	    default:
		*t++ = c;
		break;
	    }
	}
    }
 /* Terminate resultant token. */

    *t = 0;

 /* If end of line, return null pointer. */

    if (*token == 0)
	l = (char *) NULL;

 /*
  * Return update line position for access to next token.
  */
    return l;
}


/*
* This routine is extracted from the FINDER source library (ts_next_token)
*
* Description:
*     GS_NEXT_TOKEN parses a null terminated character string and returns
*     tokens from the string, to the string indicated by the
*     token argument. The value of the function is a pointer to the next
*     token in the line. Tokens are delimited by the given terminater string.
*     Quoted strings are considered one token.
*
*     The caller specifies a line to be parsed, and a character string
*     where the next word in the line is to be placed. The function
*     returns the address of the next word in the line. This address
*     should be used in subsequent calls to gs_next_token so that all
*     of the tokens can be extracted.
*
*     CALLING SEQUENCE:
*
*          next = gs_next_token(line, token, &terminator);
*
*     EXAMPLES:
*
*          char line[100];
*          char token[100];
*          char *next;
*
*          strcpy(line,"FEET/INCH");
*          next = line;
*          while (next = gs_next_token(next,token,'/'))
*               printf("%s\n",token);
*
*
*          Will produce the following output:
*
*          FEET
*          INCH
*
*
* Return Value/Status:
*     GS_NEXT_TOKEN returns a null pointer if no token could be found.
*     Naturally, this will always occur after all tokens have been
*     extracted from the character string.
*
*/
char   *gs_next_token(line, token, terminator)
char   *line;
char   *token;
char   *terminator;
{
    char   *l;		     /* Source line */
    char   *t;		     /* Returned token */
    char    c;		     /* Current token character */
    int     status;	     /* Complete token flag */
    int     quote;	     /* Quoted string being processed flag */


 /* Initialize address of returned token. */

    t = token;

 /*
  * If null string passed, then do nothing.
  */

    if (line == (char *) 0)
	l = (char *) 0;

    else {
    /* Indicate not processing quoted string. */

	quote = FALSE;

    /* Indicate still processing token. */

	status = TRUE;

    /* Initialize address of next word. */

	l = line;

    /* Skip leading spaces. */
	while ((*l != 0) && (*l == ' ') && (*l != '\n'))
	    l++;

    /* Process entire token. */

	while (status) {

	/* Look for token terminators. */

	    switch (c = *l++) {

	    /* EOL or null terminates token. */

	    case 0:

	    case '\n':
		l = (char *) NULL;
		status = FALSE;
		break;

	    /* Quote character. */
	    case '\"':

	    /*
	     * If terminating quote, then done with token.
	     */

		if (quote)
		    status = FALSE;

	    /*
	     * If leading quote, indicate processing quoted string.
	     */

		else
		    quote = TRUE;
		break;

	    /* Blank. */

	    default:
		if (c == *terminator) {

		/*
		 * If within quoted string, then blank is part of token.
		 */

		    if (quote) {
			*t++ = c;
		    }

		/*
		 * If not in quoted string, then blank terminates token.
		 */

		    else {
			status = FALSE;
		    }
		    break;

		/*
		 * Not a token terminator. Copy character into resultant
		 * token.
		 */
		}
		*t++ = c;
		break;
	    }
	}
    }
 /* Terminate resultant token. */

    *t = 0;

 /* If end of line, return null pointer. */

    if (*token == 0)
	l = (char *) NULL;

 /*
  * Return update line position for access to next token.
  */
    return l;
}
@


1.7
log
@*** empty log message ***
@
text
@a1 1
#include <string.h>
d176 1
a176 1
*          next = gs_next_token(line, token, terminator);
d205 1
a205 1
char    terminator;
d280 1
a280 1
		if (c == terminator) {
@


1.6
log
@.
@
text
@d2 1
a2 1
#include <sys/types.h>
d4 9
d15 308
@


1.5
log
@*** empty log message ***
@
text
@d4 3
a6 1
int send_data() {}
@


1.4
log
@*** empty log message ***
@
text
@d4 1
a4 5
int gs_debug(str)
char *str;
{
fprintf(stderr,"%s",str);
}
@


1.3
log
@*** empty log message ***
@
text
@a1 1
#include <fcntl.h>
a2 2
#include <sys/ipc.h>
#include <sys/shm.h>
d4 2
a5 7




GSHandle_t *gs_connect(ac,av)
int *ac;
char ***av;
d7 1
a7 43
int status = 0;
char **newargv;
int newargc;
int argc,len;
char **argv,*cp;
char *sptr;
int i,i2;

	argc = (int)*ac;
	argv =(char **)*av;

	newargv = (char **)malloc(sizeof (char *) * argc +1);
	for (i=0,i2=0; argv[i] != (char *)0; i++) {
		cp = argv[i];
		if (*cp == '-') {
			if (strcmp(cp+1,"slot") == 0) {
				if (argv[i+1] != (char *)0) {
					sptr = (char *)atoi(argv[i+1]);
					i++;
					continue;
				}
			}
		}
		len = strlen(argv[i]);
		newargv[i2] = (char *)malloc(sizeof (char) * len +1);
		strcpy(newargv[i2],argv[i]);
	}
}


char *gs_alloc(size, key)
int size;
GSKey_t *key;
{
int mid;
	mid = shmget(key->key,size,(IPC_CREAT | 0666));
	return ((void *)shmat(mid,(char *)0,0));
}

void gs_free(ptr)
void *ptr;
{
	shmdt(ptr);
@


1.2
log
@*** empty log message ***
@
text
@d2 4
d7 4
d42 16
@


1.1
log
@*** empty log message ***
@
text
@d15 2
a16 2
argc = (int)*ac;
argv =(char **)*av;
d18 10
a27 9
newargv = (char **)malloc(sizeof (char *) * argc +1);
for (i=0,i2=0; argv[i] != (char *)0; i++) {
	cp = argv[i];
	if (*cp == '-') {
		if (strcmp(cp+1,"slot") == 0) {
			if (argv[i+1] != (char *)0) {
				sptr = (int)atoi(argv[i+1]);
				i++;
				continue;
d30 3
a33 3
	len = strlen(argv[i]);
	newargv[i2] = (char *)malloc(sizeof (char) * len +1);
	strcpy(newargv[i2],argv[i]);
a34 1

@


1.0
log
@Initial
@
text
@d12 3
a16 1
char *sptr;
a17 1
int i,i2;
@
