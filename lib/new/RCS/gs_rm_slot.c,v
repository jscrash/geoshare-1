head	1.3;
access;
symbols;
locks
	julian:1.3; strict;
comment	@ * @;


1.3
date	91.05.03.21.39.53;	author julian;	state Exp;
branches;
next	1.2;

1.2
date	91.04.29.21.58.59;	author julian;	state Exp;
branches;
next	1.1;

1.1
date	91.04.24.23.12.37;	author julian;	state Exp;
branches;
next	1.0;

1.0
date	91.04.24.10.56.11;	author julian;	state Exp;
branches;
next	;


desc
@Initial checkin of gs_rm_slot.c.
@


1.3
log
@Reformat to indentation 8 for readability
@
text
@#include "gs.h"
#include <fcntl.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>

/****************************************************************************
    GeoShare Subroutine Library -  Shared Memory Tools.

Module: GS_RM_SLOT

Description:
	Remove a communications slot.  A slot is composed of two semaphores
	and a buffer.  This routine detaches and removes the shared memory
	associated with a slot after closing and removing the semaphores in
	the slot.


Usage:
	GSSlot_t *pslot;

	status = gs_remove_slot(pslot);

	
Parameters:
	INPUT:
		GSSlot_t *pslot		- Address of slot to remove.
	OUTPUT:
		None.

Status:

	This routine will return GS_SUCCESS or GS_FAIL.

Author:
	Julian Carlisle 	 Wed Apr 24 03:49:06 PDT 1991
*****************************************************************************/

extern int errno;

int     gs_remove_slot(pslot)
GSSlot_t *pslot;
{
	int     status = GS_SUCCESS;
	int     id = 0;

	errno = 0;
	if (pslot == (GSSlot_t *) 0) {
		gs_log("gs_create_slot: Null slot pointer.");
		return (GS_FAIL);
	}

 /* Create shared memory segment, return its id.	 */
	id = pslot->id;
	gs_sem_close(pslot->locksem);
	gs_sem_close(pslot->msgsem);
	gs_sem_close(pslot->cmsem);
	if (shmdt(pslot) < 0) {
		gs_log("gs_remove_slot:Cannot detach shared memory %d", pslot);
		return (GS_FAIL);
	}

	if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0) {
		gs_log("gs_remove_slot:Cannot remove shared mem.");
		return (GS_FAIL);
	}
	return (GS_SUCCESS);
}
@


1.2
log
@.
@
text
@d45 2
a46 2
    int     status = GS_SUCCESS;
    int     id = 0;
d48 5
a52 5
    errno = 0;
    if (pslot == (GSSlot_t *) 0) {
	gs_log("gs_create_slot: Null slot pointer.");
	return (GS_FAIL);
    }
d55 8
a62 8
    id = pslot->id;
    gs_sem_close(pslot->locksem);
    gs_sem_close(pslot->msgsem);
    gs_sem_close(pslot->cmsem);
    if (shmdt(pslot) < 0) {
	gs_log("gs_remove_slot:Cannot detach shared memory %d", pslot);
	return (GS_FAIL);
    }
d64 5
a68 5
    if (shmctl(id, IPC_RMID, (struct shmid_ds *) 0) < 0) {
	gs_log("gs_remove_slot:Cannot remove shared mem.");
	return (GS_FAIL);
    }
    return (GS_SUCCESS);
@


1.1
log
@*** empty log message ***
@
text
@d42 1
a42 1
int gs_remove_slot(pslot)
d45 2
a46 2
int status = GS_SUCCESS;
int id = 0;
d48 5
a52 5
	errno = 0;
	if (pslot == (GSSlot_t *)0) {
		gs_log("gs_create_slot: Null slot pointer.");
		return (GS_FAIL);
	}
d54 9
a62 9
			/* Create shared memory segment, return its id.	*/
	id = pslot->id;
	gs_sem_close(pslot->locksem);
	gs_sem_close(pslot->msgsem);
	gs_sem_close(pslot->cmsem);
	if (shmdt(pslot) < 0 ) {
		gs_log("gs_remove_slot:Cannot detach shared memory %d", pslot);
		return(GS_FAIL);
	}
d64 5
a68 5
	if (shmctl(id,IPC_RMID,(struct shmid_ds *)0) < 0) {
		gs_log("gs_remove_slot:Cannot remove shared mem.");
		return(GS_FAIL);
	}
return (GS_SUCCESS);
@


1.0
log
@Initial
@
text
@d58 1
@
